
L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080072f8  080072f8  000082f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007300  08007300  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007308  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000060  08007368  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08007368  00009390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f524  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1a  00000000  00000000  000285b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0002c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001006  00000000  00000000  0002d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c70  00000000  00000000  0002e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cde  00000000  00000000  00054626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de563  00000000  00000000  0006a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006448  00000000  00000000  001488ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0014ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bcc 	.word	0x08006bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006bcc 	.word	0x08006bcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <_ZN3AppC1EP17TIM_HandleTypeDefP20__UART_HandleTypeDef>:
#include "app/App.hpp"
#include "app/util/MemoryMonitor.hpp"

App::App(TIM_HandleTypeDef* htim, UART_HandleTypeDef* huart)
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
: timerManager(htim),
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f932 	bl	80010d6 <_ZN12TimerManagerC1EP17TIM_HandleTypeDef>
				ledController(new LedController(LD3_GPIO_Port, LD3_Pin))
 8000e72:	2010      	movs	r0, #16
 8000e74:	f004 ffb6 	bl	8005de4 <_Znwj>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <_ZN3AppC1EP17TIM_HandleTypeDefP20__UART_HandleTypeDef+0x54>)
 8000e80:	4620      	mov	r0, r4
 8000e82:	f000 f8e1 	bl	8001048 <_ZN13LedControllerC1EP12GPIO_TypeDeft>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	609c      	str	r4, [r3, #8]
{
	DebugLogger::getInstance().init(huart);
 8000e8a:	f000 f953 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f984 	bl	80011a0 <_ZN11DebugLogger4initEP20__UART_HandleTypeDef>

	LOG("\r\nApp Constructor Initialized\r\n");
 8000e98:	f000 f94c 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4905      	ldr	r1, [pc, #20]	@ (8000eb4 <_ZN3AppC1EP17TIM_HandleTypeDefP20__UART_HandleTypeDef+0x58>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f98f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
}
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	08006be4 	.word	0x08006be4

08000eb8 <_Z20allocateArrayOnStackR13MemoryMonitor>:

void allocateArrayOnStack(MemoryMonitor& monitor)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000ec4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8000ec8:	6018      	str	r0, [r3, #0]
	int array[300] = {0};
 8000eca:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000ece:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2100      	movs	r1, #0
 8000edc:	f005 f9d0 	bl	8006280 <memset>

	monitor.printMemoryUsage();
 8000ee0:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000ee4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f000 fb47 	bl	800157c <_ZNK13MemoryMonitor16printMemoryUsageEv>
}
 8000eee:	bf00      	nop
 8000ef0:	f507 6797 	add.w	r7, r7, #1208	@ 0x4b8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZN3App4initEv>:

void App::init()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	LOG("App Initialized\r\n");
 8000f00:	f000 f918 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4929      	ldr	r1, [pc, #164]	@ (8000fac <_ZN3App4initEv+0xb4>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f95b 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>

	MemoryMonitor& monitor = MemoryMonitor::getInstance();
 8000f0e:	f000 f9f7 	bl	8001300 <_ZN13MemoryMonitor11getInstanceEv>
 8000f12:	6178      	str	r0, [r7, #20]

	void* ptr1 = monitor.monitoredMalloc(100);
 8000f14:	2164      	movs	r1, #100	@ 0x64
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f000 faa7 	bl	800146a <_ZN13MemoryMonitor15monitoredMallocEj>
 8000f1c:	6138      	str	r0, [r7, #16]
	void* ptr2 = monitor.monitoredMalloc(200);
 8000f1e:	21c8      	movs	r1, #200	@ 0xc8
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f000 faa2 	bl	800146a <_ZN13MemoryMonitor15monitoredMallocEj>
 8000f26:	60f8      	str	r0, [r7, #12]

	LOG("Total allocated memory: %d bytes\r\n", monitor.getTotalAllocatedMemory());
 8000f28:	f000 f904 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f000 fb0b 	bl	800154a <_ZNK13MemoryMonitor23getTotalAllocatedMemoryEv>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	491d      	ldr	r1, [pc, #116]	@ (8000fb0 <_ZN3App4initEv+0xb8>)
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f000 f942 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Current allocated memory: %d bytes\r\n", monitor.getCurrentAllocatedMemory());
 8000f40:	f000 f8f8 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000f44:	4604      	mov	r4, r0
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f000 fb0b 	bl	8001562 <_ZNK13MemoryMonitor25getCurrentAllocatedMemoryEv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4918      	ldr	r1, [pc, #96]	@ (8000fb4 <_ZN3App4initEv+0xbc>)
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f936 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>

	monitor.monitoredFree(ptr1);
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f000 faae 	bl	80014bc <_ZN13MemoryMonitor13monitoredFreeEPv>
	monitor.monitoredFree(ptr2);
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f000 faaa 	bl	80014bc <_ZN13MemoryMonitor13monitoredFreeEPv>

	LOG("Total allocated memory: %d bytes\r\n", monitor.getTotalAllocatedMemory());
 8000f68:	f000 f8e4 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f000 faeb 	bl	800154a <_ZNK13MemoryMonitor23getTotalAllocatedMemoryEv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <_ZN3App4initEv+0xb8>)
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f000 f922 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Current allocated memory: %d bytes\r\n", monitor.getCurrentAllocatedMemory());
 8000f80:	f000 f8d8 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 8000f84:	4604      	mov	r4, r0
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f000 faeb 	bl	8001562 <_ZNK13MemoryMonitor25getCurrentAllocatedMemoryEv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <_ZN3App4initEv+0xbc>)
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f916 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>

	monitor.printMemoryUsage();
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f000 faef 	bl	800157c <_ZNK13MemoryMonitor16printMemoryUsageEv>

	allocateArrayOnStack(monitor);
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8a 	bl	8000eb8 <_Z20allocateArrayOnStackR13MemoryMonitor>
}
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	08006c04 	.word	0x08006c04
 8000fb0:	08006c18 	.word	0x08006c18
 8000fb4:	08006c3c 	.word	0x08006c3c

08000fb8 <_ZN3App4loopEv>:

void App::loop()
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	ledController->update(timerManager.getElapsedTime());
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689c      	ldr	r4, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8a7 	bl	800111a <_ZNK12TimerManager14getElapsedTimeEv>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f000 f86a 	bl	80010aa <_ZN13LedController6updateEm>
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
	...

08000fe0 <App_Init>:
extern UART_HandleTypeDef huart2;

App* app = nullptr;

extern "C" void App_Init()
{
 8000fe0:	b598      	push	{r3, r4, r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	app = new App(&htim2, &huart2);
 8000fe4:	200c      	movs	r0, #12
 8000fe6:	f004 fefd 	bl	8005de4 <_Znwj>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461c      	mov	r4, r3
 8000fee:	4a07      	ldr	r2, [pc, #28]	@ (800100c <App_Init+0x2c>)
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <App_Init+0x30>)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff ff32 	bl	8000e5c <_ZN3AppC1EP17TIM_HandleTypeDefP20__UART_HandleTypeDef>
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <App_Init+0x34>)
 8000ffa:	601c      	str	r4, [r3, #0]
	app->init();
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <App_Init+0x34>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff79 	bl	8000ef8 <_ZN3App4initEv>
}
 8001006:	bf00      	nop
 8001008:	bd98      	pop	{r3, r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	200000fc 	.word	0x200000fc
 8001010:	200000b0 	.word	0x200000b0
 8001014:	2000007c 	.word	0x2000007c

08001018 <App_Loop>:

extern "C" void App_Loop()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	app->loop();
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <App_Loop+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffc9 	bl	8000fb8 <_ZN3App4loopEv>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000007c 	.word	0x2000007c

08001030 <App_TIM2_IRQHandler>:
	delete app;
	app = nullptr;
}

extern "C" void App_TIM2_IRQHandler()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	app->timerManager.handleInterrupt();
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <App_TIM2_IRQHandler+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f85f 	bl	80010fc <_ZN12TimerManager15handleInterruptEv>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000007c 	.word	0x2000007c

08001048 <_ZN13LedControllerC1EP12GPIO_TypeDeft>:
#include "app/model/LedController.hpp"
#include "app/util/DebugLogger.hpp"

LedController::LedController(GPIO_TypeDef* port, uint16_t pin)
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
: port(port), pin(pin), lastToggleTime(0), state(false)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	809a      	strh	r2, [r3, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	731a      	strb	r2, [r3, #12]
{
}
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZN13LedController9toggleLedEv>:

void LedController::toggleLed()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(port, pin);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f002 fb94 	bl	80037bc <HAL_GPIO_TogglePin>
	state = !state;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7b1b      	ldrb	r3, [r3, #12]
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	731a      	strb	r2, [r3, #12]
	//LOG("Pin toggled at elapsed time: %lu ms\r\n", lastToggleTime);
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZN13LedController6updateEm>:

void LedController::update(uint32_t elapsedTime)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	if((elapsedTime - lastToggleTime) >= 300)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80010c0:	d305      	bcc.n	80010ce <_ZN13LedController6updateEm+0x24>
	{
		toggleLed();
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffda 	bl	800107c <_ZN13LedController9toggleLedEv>
		lastToggleTime = elapsedTime;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	609a      	str	r2, [r3, #8]
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN12TimerManagerC1EP17TIM_HandleTypeDef>:
#include "app/model/TimerManager.hpp"

TimerManager::TimerManager(TIM_HandleTypeDef* htim)
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
: htim(htim), elapsedTime(0)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
{
	HAL_TIM_Base_Start_IT(htim);
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f003 fd7b 	bl	8004be8 <HAL_TIM_Base_Start_IT>
}
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN12TimerManager15handleInterruptEv>:

void TimerManager::handleInterrupt()
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	elapsedTime++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZNK12TimerManager14getElapsedTimeEv>:

uint32_t TimerManager::getElapsedTime() const
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return elapsedTime;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <_ZN11DebugLogger11getInstanceEv>:
#include "app/util/DebugLogger.hpp"

DebugLogger& DebugLogger::getInstance()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	static DebugLogger instance;
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_ZN11DebugLogger11getInstanceEv+0x48>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f3bf 8f5b 	dmb	ish
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d010      	beq.n	8001174 <_ZN11DebugLogger11getInstanceEv+0x40>
 8001152:	480a      	ldr	r0, [pc, #40]	@ (800117c <_ZN11DebugLogger11getInstanceEv+0x48>)
 8001154:	f004 fe37 	bl	8005dc6 <__cxa_guard_acquire>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <_ZN11DebugLogger11getInstanceEv+0x40>
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <_ZN11DebugLogger11getInstanceEv+0x4c>)
 800116a:	f000 f80b 	bl	8001184 <_ZN11DebugLoggerC1Ev>
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <_ZN11DebugLogger11getInstanceEv+0x48>)
 8001170:	f004 fe35 	bl	8005dde <__cxa_guard_release>
	return instance;
 8001174:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <_ZN11DebugLogger11getInstanceEv+0x4c>)
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000084 	.word	0x20000084
 8001180:	20000080 	.word	0x20000080

08001184 <_ZN11DebugLoggerC1Ev>:

DebugLogger::DebugLogger() : huart(nullptr)
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
{
}
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_ZN11DebugLogger4initEP20__UART_HandleTypeDef>:

void DebugLogger::init(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	this->huart = huart;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	601a      	str	r2, [r3, #0]

	log("DebugLogger Initialized\r\n");
 80011b0:	4903      	ldr	r1, [pc, #12]	@ (80011c0 <_ZN11DebugLogger4initEP20__UART_HandleTypeDef+0x20>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f806 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	08006c64 	.word	0x08006c64

080011c4 <_ZN11DebugLogger3logEPKcz>:

void DebugLogger::log(const char* format, ...)
{
 80011c4:	b40e      	push	{r1, r2, r3}
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b0a4      	sub	sp, #144	@ 0x90
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	if(huart)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01c      	beq.n	8001210 <_ZN11DebugLogger3logEPKcz+0x4c>
	{
		char buffer[128];
		va_list args;
		va_start(args, format);
 80011d6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80011da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		vsnprintf(buffer, sizeof(buffer), format, args);
 80011de:	f107 000c 	add.w	r0, r7, #12
 80011e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	f005 f83a 	bl	8006264 <vsniprintf>
		va_end(args);
		HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7fe ffe9 	bl	80001d0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 010c 	add.w	r1, r7, #12
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120a:	4620      	mov	r0, r4
 800120c:	f004 f90e 	bl	800542c <HAL_UART_Transmit>
	}
}
 8001210:	bf00      	nop
 8001212:	3790      	adds	r7, #144	@ 0x90
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800121a:	b003      	add	sp, #12
 800121c:	4770      	bx	lr

0800121e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8001252:	b480      	push	{r7}
 8001254:	b085      	sub	sp, #20
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	fbb3 f2f2 	udiv	r2, r3, r2
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEED1Ev>:
   */
  template<typename _Key, typename _Tp,
	   typename _Hash = hash<_Key>,
	   typename _Pred = equal_to<_Key>,
	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
    class unordered_map
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fa60 	bl	8001788 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZN13MemoryMonitorD1Ev>:
extern char _ebss;
extern char _sdata;
extern char _edata;
extern char _Min_Stack_Size;

class MemoryMonitor
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3308      	adds	r3, #8
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffea 	bl	80012b8 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEED1Ev>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <__tcf_0>:
#include "app/util/DebugLogger.hpp"
#include <cstdint>

MemoryMonitor& MemoryMonitor::getInstance()
{
	static MemoryMonitor instance;
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4801      	ldr	r0, [pc, #4]	@ (80012fc <__tcf_0+0xc>)
 80012f6:	f7ff ffec 	bl	80012d2 <_ZN13MemoryMonitorD1Ev>
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000088 	.word	0x20000088

08001300 <_ZN13MemoryMonitor11getInstanceEv>:
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	static MemoryMonitor instance;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <_ZN13MemoryMonitor11getInstanceEv+0x4c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f3bf 8f5b 	dmb	ish
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d013      	beq.n	8001346 <_ZN13MemoryMonitor11getInstanceEv+0x46>
 800131e:	480b      	ldr	r0, [pc, #44]	@ (800134c <_ZN13MemoryMonitor11getInstanceEv+0x4c>)
 8001320:	f004 fd51 	bl	8005dc6 <__cxa_guard_acquire>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <_ZN13MemoryMonitor11getInstanceEv+0x46>
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <_ZN13MemoryMonitor11getInstanceEv+0x50>)
 8001336:	f000 f884 	bl	8001442 <_ZN13MemoryMonitorC1Ev>
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <_ZN13MemoryMonitor11getInstanceEv+0x54>)
 800133c:	f004 fe97 	bl	800606e <atexit>
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <_ZN13MemoryMonitor11getInstanceEv+0x4c>)
 8001342:	f004 fd4c 	bl	8005dde <__cxa_guard_release>
	return instance;
 8001346:	4b02      	ldr	r3, [pc, #8]	@ (8001350 <_ZN13MemoryMonitor11getInstanceEv+0x50>)
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000ac 	.word	0x200000ac
 8001350:	20000088 	.word	0x20000088
 8001354:	080012f1 	.word	0x080012f1

08001358 <_ZNSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa23 	bl	80017ac <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIPvELb1EEC1Ev>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZNSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffed 	bl	8001358 <_ZNSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa1f 	bl	80017c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIPvELb1EEC1Ev>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fa2a 	bl	80017f0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEED1Ev>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fa12 	bl	80017d8 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EEC1Ev>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffe1 	bl	800138e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EED1Ev>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffc6 	bl	8001370 <_ZNSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ffde 	bl	80013a6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEEC1Ev>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f103 0218 	add.w	r2, r3, #24
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3308      	adds	r3, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff19 	bl	8001236 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3310      	adds	r3, #16
 800140e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff31 	bl	800127a <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffcf 	bl	80013d6 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN13MemoryMonitorC1Ev>:

MemoryMonitor::MemoryMonitor()
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
: totalAllocatedMemory(0), currentAllocatedMemory(0)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3308      	adds	r3, #8
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffe4 	bl	8001428 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEEC1Ev>
{
}
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_ZN13MemoryMonitor15monitoredMallocEj>:

void* MemoryMonitor::monitoredMalloc(size_t size)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
	void* ptr = malloc(size);
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f004 fe01 	bl	800607c <malloc>
 800147a:	4603      	mov	r3, r0
 800147c:	60fb      	str	r3, [r7, #12]
	if(ptr != nullptr)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <_ZN13MemoryMonitor15monitoredMallocEj+0x48>
	{
		totalAllocatedMemory += size;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]
		currentAllocatedMemory += size;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	441a      	add	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
		allocationMap[ptr] = size; // Track allocation size
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3308      	adds	r3, #8
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f9ae 	bl	8001808 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEEixERS6_>
 80014ac:	4602      	mov	r2, r0
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6013      	str	r3, [r2, #0]
	}
	return ptr;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN13MemoryMonitor13monitoredFreeEPv>:

void MemoryMonitor::monitoredFree(void* ptr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	if(ptr != nullptr && allocationMap.find(ptr) != allocationMap.end())
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01c      	beq.n	8001506 <_ZN13MemoryMonitor13monitoredFreeEPv+0x4a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3308      	adds	r3, #8
 80014d0:	463a      	mov	r2, r7
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f9a6 	bl	8001826 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE4findERS6_>
 80014da:	4603      	mov	r3, r0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3308      	adds	r3, #8
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f9ae 	bl	8001844 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE3endEv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	f107 0210 	add.w	r2, r7, #16
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f9b1 	bl	800185e <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKPvjELb0EEES7_>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZN13MemoryMonitor13monitoredFreeEPv+0x4a>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <_ZN13MemoryMonitor13monitoredFreeEPv+0x4c>
 8001506:	2300      	movs	r3, #0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01a      	beq.n	8001542 <_ZN13MemoryMonitor13monitoredFreeEPv+0x86>
	{
		size_t size = allocationMap[ptr];
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	463a      	mov	r2, r7
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f977 	bl	8001808 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEEixERS6_>
 800151a:	4603      	mov	r3, r0
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	617b      	str	r3, [r7, #20]
		currentAllocatedMemory -= size;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	605a      	str	r2, [r3, #4]
		allocationMap.erase(ptr); // Remove from map
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3308      	adds	r3, #8
 8001530:	463a      	mov	r2, r7
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f9a6 	bl	8001886 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE5eraseERS6_>
		free(ptr);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f004 fda5 	bl	800608c <free>
	}
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZNK13MemoryMonitor23getTotalAllocatedMemoryEv>:

size_t MemoryMonitor::getTotalAllocatedMemory() const
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return totalAllocatedMemory;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_ZNK13MemoryMonitor25getCurrentAllocatedMemoryEv>:

size_t MemoryMonitor::getCurrentAllocatedMemory() const
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return currentAllocatedMemory;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_ZNK13MemoryMonitor16printMemoryUsageEv>:

void MemoryMonitor::printMemoryUsage() const
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b096      	sub	sp, #88	@ 0x58
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	struct mallinfo mi = mallinfo();
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fe35 	bl	80061f8 <mallinfo>

	// Heap size
	unsigned int heapSize = mi.uordblks;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	657b      	str	r3, [r7, #84]	@ 0x54
	// Stack pointer
	uintptr_t stackPointer = reinterpret_cast<uintptr_t>(__builtin_frame_address(0));
 8001592:	463b      	mov	r3, r7
 8001594:	653b      	str	r3, [r7, #80]	@ 0x50
	// Total stack size
	unsigned int totalStackSize = reinterpret_cast<uintptr_t>(&_estack) - reinterpret_cast<uintptr_t>(&_end);
 8001596:	4a61      	ldr	r2, [pc, #388]	@ (800171c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a0>)
 8001598:	4b61      	ldr	r3, [pc, #388]	@ (8001720 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a4>)
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	// Used stack size
	unsigned int usedStackSize = reinterpret_cast<uintptr_t>(&_estack) - stackPointer;
 800159e:	4a5f      	ldr	r2, [pc, #380]	@ (800171c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a0>)
 80015a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	64bb      	str	r3, [r7, #72]	@ 0x48
	// Free stack size
	unsigned int freeStackSize = totalStackSize - usedStackSize;
 80015a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80015a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	647b      	str	r3, [r7, #68]	@ 0x44

	// BSS segment size
	unsigned int bssSize = reinterpret_cast<uintptr_t>(&_ebss) - reinterpret_cast<uintptr_t>(&_sbss);
 80015ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001724 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a8>)
 80015b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001728 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1ac>)
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	643b      	str	r3, [r7, #64]	@ 0x40
	// Data segment size
	unsigned int dataSize = reinterpret_cast<uintptr_t>(&_edata) - reinterpret_cast<uintptr_t>(&_sdata);
 80015b6:	4a5d      	ldr	r2, [pc, #372]	@ (800172c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1b0>)
 80015b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1b4>)
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// Total RAM size (64KB + 16KB = 80KB)
	unsigned int totalRamSize = 64 * 1024 + 16 * 1024;
 80015be:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	// Total used RAM
	unsigned int totalUsedRam = heapSize + usedStackSize + bssSize + dataSize;
 80015c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80015c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015c8:	441a      	add	r2, r3
 80015ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015cc:	4413      	add	r3, r2
 80015ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015d0:	4413      	add	r3, r2
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
	// Total free RAM
	unsigned int totalFreeRam = totalRamSize - totalUsedRam;
 80015d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30

	LOG("Total space allocated from system: %d bytes\r\n", mi.arena);
 80015dc:	f7ff fdaa 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4953      	ldr	r1, [pc, #332]	@ (8001734 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1b8>)
 80015e6:	f7ff fded 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total free space: %d bytes\r\n", mi.fordblks);
 80015ea:	f7ff fda3 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	461a      	mov	r2, r3
 80015f2:	4951      	ldr	r1, [pc, #324]	@ (8001738 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1bc>)
 80015f4:	f7ff fde6 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total allocated space: %d bytes\r\n", mi.uordblks);
 80015f8:	f7ff fd9c 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	461a      	mov	r2, r3
 8001600:	494e      	ldr	r1, [pc, #312]	@ (800173c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1c0>)
 8001602:	f7ff fddf 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Heap size: %u bytes\r\n", heapSize);
 8001606:	f7ff fd95 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800160a:	4603      	mov	r3, r0
 800160c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800160e:	494c      	ldr	r1, [pc, #304]	@ (8001740 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1c4>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fdd7 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total stack size: %u bytes\r\n", totalStackSize);
 8001616:	f7ff fd8d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800161a:	4603      	mov	r3, r0
 800161c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800161e:	4949      	ldr	r1, [pc, #292]	@ (8001744 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1c8>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdcf 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Used stack size: %u bytes\r\n", usedStackSize);
 8001626:	f7ff fd85 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800162a:	4603      	mov	r3, r0
 800162c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800162e:	4946      	ldr	r1, [pc, #280]	@ (8001748 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1cc>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdc7 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Free stack size: %u bytes\r\n", freeStackSize);
 8001636:	f7ff fd7d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800163a:	4603      	mov	r3, r0
 800163c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800163e:	4943      	ldr	r1, [pc, #268]	@ (800174c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1d0>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fdbf 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("BSS size: %u bytes\r\n", bssSize);
 8001646:	f7ff fd75 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800164a:	4603      	mov	r3, r0
 800164c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800164e:	4940      	ldr	r1, [pc, #256]	@ (8001750 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1d4>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fdb7 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Data size: %u bytes\r\n", dataSize);
 8001656:	f7ff fd6d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800165a:	4603      	mov	r3, r0
 800165c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800165e:	493d      	ldr	r1, [pc, #244]	@ (8001754 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1d8>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fdaf 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total used RAM: %u bytes\r\n", totalUsedRam);
 8001666:	f7ff fd65 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800166a:	4603      	mov	r3, r0
 800166c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800166e:	493a      	ldr	r1, [pc, #232]	@ (8001758 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1dc>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fda7 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total free RAM: %u bytes\r\n", totalFreeRam);
 8001676:	f7ff fd5d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800167a:	4603      	mov	r3, r0
 800167c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800167e:	4937      	ldr	r1, [pc, #220]	@ (800175c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1e0>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd9f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Total RAM: %u bytes\r\n", totalRamSize);
 8001686:	f7ff fd55 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800168a:	4603      	mov	r3, r0
 800168c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800168e:	4934      	ldr	r1, [pc, #208]	@ (8001760 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1e4>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd97 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>

	// Add log messages to check the values of the symbols
	LOG("_end: %p\r\n", &_end);
 8001696:	f7ff fd4d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800169a:	4603      	mov	r3, r0
 800169c:	4a20      	ldr	r2, [pc, #128]	@ (8001720 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a4>)
 800169e:	4931      	ldr	r1, [pc, #196]	@ (8001764 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1e8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fd8f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_estack: %p\r\n", &_estack);
 80016a6:	f7ff fd45 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a0>)
 80016ae:	492e      	ldr	r1, [pc, #184]	@ (8001768 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1ec>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd87 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_sbss: %p\r\n", &_sbss);
 80016b6:	f7ff fd3d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1ac>)
 80016be:	492b      	ldr	r1, [pc, #172]	@ (800176c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1f0>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd7f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_ebss: %p\r\n", &_ebss);
 80016c6:	f7ff fd35 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1a8>)
 80016ce:	4928      	ldr	r1, [pc, #160]	@ (8001770 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1f4>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd77 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_sdata: %p\r\n", &_sdata);
 80016d6:	f7ff fd2d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1b4>)
 80016de:	4925      	ldr	r1, [pc, #148]	@ (8001774 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1f8>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd6f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_edata: %p\r\n", &_edata);
 80016e6:	f7ff fd25 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1b0>)
 80016ee:	4922      	ldr	r1, [pc, #136]	@ (8001778 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x1fc>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fd67 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("_Min_Stack_Size: %p\r\n", &_Min_Stack_Size);
 80016f6:	f7ff fd1d 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <_ZNK13MemoryMonitor16printMemoryUsageEv+0x200>)
 80016fe:	4920      	ldr	r1, [pc, #128]	@ (8001780 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x204>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd5f 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
	LOG("Stack Pointer: %p\r\n", reinterpret_cast<void*>(stackPointer));
 8001706:	f7ff fd15 	bl	8001134 <_ZN11DebugLogger11getInstanceEv>
 800170a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800170c:	461a      	mov	r2, r3
 800170e:	491d      	ldr	r1, [pc, #116]	@ (8001784 <_ZNK13MemoryMonitor16printMemoryUsageEv+0x208>)
 8001710:	f7ff fd58 	bl	80011c4 <_ZN11DebugLogger3logEPKcz>
}
 8001714:	bf00      	nop
 8001716:	3758      	adds	r7, #88	@ 0x58
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20010000 	.word	0x20010000
 8001720:	20000390 	.word	0x20000390
 8001724:	20000390 	.word	0x20000390
 8001728:	20000060 	.word	0x20000060
 800172c:	20000060 	.word	0x20000060
 8001730:	20000000 	.word	0x20000000
 8001734:	08006c80 	.word	0x08006c80
 8001738:	08006cb0 	.word	0x08006cb0
 800173c:	08006cd0 	.word	0x08006cd0
 8001740:	08006cf4 	.word	0x08006cf4
 8001744:	08006d0c 	.word	0x08006d0c
 8001748:	08006d2c 	.word	0x08006d2c
 800174c:	08006d48 	.word	0x08006d48
 8001750:	08006d64 	.word	0x08006d64
 8001754:	08006d7c 	.word	0x08006d7c
 8001758:	08006d94 	.word	0x08006d94
 800175c:	08006db0 	.word	0x08006db0
 8001760:	08006dcc 	.word	0x08006dcc
 8001764:	08006de4 	.word	0x08006de4
 8001768:	08006df0 	.word	0x08006df0
 800176c:	08006e00 	.word	0x08006e00
 8001770:	08006e0c 	.word	0x08006e0c
 8001774:	08006e18 	.word	0x08006e18
 8001778:	08006e28 	.word	0x08006e28
 800177c:	00000400 	.word	0x00000400
 8001780:	08006e38 	.word	0x08006e38
 8001784:	08006e50 	.word	0x08006e50

08001788 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f887 	bl	80018a4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8a4 	bl	80018e4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fe0e 	bl	80013be <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEED1Ev>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIPvELb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIPvELb1EEC1Ev>:
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EEC1Ev>:
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f88f 	bl	8001904 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEC1Ev>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f88f 	bl	800191c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEED1Ev>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEEixERS6_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f88c 	bl	8001934 <_ZNSt8__detail9_Map_baseIPvSt4pairIKS1_jESaIS4_ENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS3_>
 800181c:	4603      	mov	r3, r0
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE4findERS6_>:
      find(const key_type& __x)
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
      { return _M_h.find(__x); }
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f8d3 	bl	80019e0 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE3endEv>:
      end() noexcept
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
      { return _M_h.end(); }
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f921 	bl	8001a96 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8001854:	4603      	mov	r3, r0
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKPvjELb0EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_ZNSt13unordered_mapIPvjSt4hashIS0_ESt8equal_toIS0_ESaISt4pairIKS0_jEEE5eraseERS6_>:
      erase(const key_type& __x)
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
      { return _M_h.erase(__x); }
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6839      	ldr	r1, [r7, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f90d 	bl	8001ab4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5eraseERS2_>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f910 	bl	8001ad2 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f917 	bl	8001aea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f004 fcd8 	bl	8006280 <memset>
      _M_element_count = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    }
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	461a      	mov	r2, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f90f 	bl	8001b1a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f91b 	bl	8001b48 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEC1Ev>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_ZNSt8__detail9_Map_baseIPvSt4pairIKS1_jESaIS4_ENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS3_>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b08f      	sub	sp, #60	@ 0x3c
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001946:	f000 f90a 	bl	8001b5e <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS3_>
 800194a:	62b8      	str	r0, [r7, #40]	@ 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 800194c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800194e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001950:	f000 f919 	bl	8001b86 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001954:	6278      	str	r0, [r7, #36]	@ 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 8001956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800195c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800195e:	f000 f923 	bl	8001ba8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS2_j>
 8001962:	6238      	str	r0, [r7, #32]
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <_ZNSt8__detail9_Map_baseIPvSt4pairIKS1_jESaIS4_ENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS3_+0x46>
	return __node->_M_v().second;
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	3304      	adds	r3, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f933 	bl	8001bda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE4_M_vEv>
 8001974:	4603      	mov	r3, r0
 8001976:	1d1c      	adds	r4, r3, #4
 8001978:	e02a      	b.n	80019d0 <_ZNSt8__detail9_Map_baseIPvSt4pairIKS1_jESaIS4_ENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS3_+0x9c>
      typename __hashtable::_Scoped_node __node {
 800197a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
	std::tuple<const key_type&>(__k),
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f935 	bl	8001bf2 <_ZNSt5tupleIJRKPvEEC1ILb1ELb1EEES2_>
      typename __hashtable::_Scoped_node __node {
 8001988:	f107 0218 	add.w	r2, r7, #24
 800198c:	f107 0010 	add.w	r0, r7, #16
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4613      	mov	r3, r2
 8001998:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <_ZNSt8__detail9_Map_baseIPvSt4pairIKS1_jESaIS4_ENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS3_+0xa8>)
 800199a:	4621      	mov	r1, r4
 800199c:	f000 f938 	bl	8001c10 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS2_EESM_IJEEEEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2201      	movs	r2, #1
 80019a4:	9200      	str	r2, [sp, #0]
 80019a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019ac:	f000 f969 	bl	8001c82 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
      return __pos->second;
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f9a9 	bl	8001d14 <_ZNKSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEptEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	1d1c      	adds	r4, r3, #4
    }
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f944 	bl	8001c58 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 80019d0:	4623      	mov	r3, r4
 80019d2:	4618      	mov	r0, r3
 80019d4:	3734      	adds	r7, #52	@ 0x34
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	08006e64 	.word	0x08006e64

080019e0 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f9a1 	bl	8001d32 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 80019f0:	4604      	mov	r4, r0
 80019f2:	f000 f9aa 	bl	8001d4a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	429c      	cmp	r4, r3
 80019fa:	bf94      	ite	ls
 80019fc:	2301      	movls	r3, #1
 80019fe:	2300      	movhi	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02b      	beq.n	8001a5e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0x7e>
	  for (auto __it = begin(); __it != end(); ++__it)
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9a6 	bl	8001d58 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e010      	b.n	8001a34 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3304      	adds	r3, #4
 8001a16:	461a      	mov	r2, r3
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9bc 	bl	8001d98 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb0EEE>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0x4a>
	      return __it;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	e031      	b.n	8001a8e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0xae>
	  for (auto __it = begin(); __it != end(); ++__it)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f9a5 	bl	8001d7e <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEppEv>
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f82e 	bl	8001a96 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	f107 0210 	add.w	r2, r7, #16
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff08 	bl	800185e <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKPvjELb0EEES7_>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1de      	bne.n	8001a12 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0x32>
	  return end();
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f81e 	bl	8001a96 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	e017      	b.n	8001a8e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4findERS2_+0xae>
      __hash_code __code = this->_M_hash_code(__k);
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f87c 	bl	8001b5e <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS3_>
 8001a66:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f88b 	bl	8001b86 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001a70:	61b8      	str	r0, [r7, #24]
      return iterator(_M_find_node(__bkt, __k, __code));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f895 	bl	8001ba8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS2_j>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f9a6 	bl	8001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001a8c:	697b      	ldr	r3, [r7, #20]
    }
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f997 	bl	8001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5eraseERS2_>:
      erase(const key_type& __k)
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
      { return _M_erase(__unique_keys{}, __k); }
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f997 	bl	8001df6 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001af4:	e009      	b.n	8001b0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f000 f9c8 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 8001b00:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001b02:	68f9      	ldr	r1, [r7, #12]
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f9cf 	bl	8001ea8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f2      	bne.n	8001af6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f9d8 	bl	8001ede <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f9e8 	bl	8001f0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8001b3e:	e000      	b.n	8001b42 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 8001b40:	bf00      	nop
      }
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS3_>:
      _M_hash_code(const _Key& __k) const
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f9f3 	bl	8001f54 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f000 f9f8 	bl	8001f6c <_ZNKSt4hashIPvEclES0_>
 8001b7c:	4603      	mov	r3, r0
      }
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	461a      	mov	r2, r3
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f9f3 	bl	8001f84 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS2_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f9f3 	bl	8001fa8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j>
 8001bc2:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS2_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	e000      	b.n	8001bd2 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS2_j+0x2a>
	return nullptr;
 8001bd0:	2300      	movs	r3, #0
      }
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE4_M_vEv>:
      _M_v() noexcept
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa25 	bl	8002032 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_ZNSt5tupleIJRKPvEEC1ILb1ELb1EEES2_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fa23 	bl	800204c <_ZNSt11_Tuple_implILj0EJRKPvEEC1ES2_>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS2_EESM_IJEEEEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8001c24:	68bc      	ldr	r4, [r7, #8]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa1f 	bl	800206a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001c2c:	4605      	mov	r5, r0
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f000 fa26 	bl	8002080 <_ZSt7forwardISt5tupleIJRKPvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001c34:	4606      	mov	r6, r0
 8001c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c38:	f000 fa2d 	bl	8002096 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4632      	mov	r2, r6
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f000 fa3f 	bl	80020c6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS4_EESD_IJEEEEEPS6_DpOT_>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
	  { }
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c58 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f918 	bl	8001ea8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE18_M_deallocate_nodeEPS6_>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001c82:	b590      	push	{r4, r7, lr}
 8001c84:	b08d      	sub	sp, #52	@ 0x34
 8001c86:	af02      	add	r7, sp, #8
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3310      	adds	r3, #16
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fb03 	bl	80012a0 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f103 0110 	add.w	r1, r3, #16
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	68dc      	ldr	r4, [r3, #12]
 8001cb2:	f107 0014 	add.w	r0, r7, #20
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4623      	mov	r3, r4
 8001cbc:	f004 f8ee 	bl	8005e9c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fa3b 	bl	8002148 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ff56 	bl	8001b86 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001cda:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fa3e 	bl	8002166 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa45 	bl	800217e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>
      ++_M_element_count;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f867 	bl	8001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	372c      	adds	r7, #44	@ 0x2c
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}

08001d14 <_ZNKSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEptEv>:
      operator->() const noexcept
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3304      	adds	r3, #4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f985 	bl	8002032 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8001d4e:	f000 fa5d 	bl	800220c <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIPvEE22__small_size_thresholdEv>
 8001d52:	4603      	mov	r3, r0
      }
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff feb6 	bl	8001ad2 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f832 	bl	8001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEppEv>:
      operator++() noexcept
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa47 	bl	800221c <_ZNSt8__detail19_Node_iterator_baseISt4pairIKPvjELb0EE7_M_incrEv>
	return *this;
 8001d8e:	687b      	ldr	r3, [r7, #4]
      }
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fa49 	bl	800223c <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8001daa:	4604      	mov	r4, r0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fa50 	bl	8002254 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE4_M_vEv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fa55 	bl	800226c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKPvjEEEONS0_10__1st_typeIT_E4typeEOS9_>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 fa5c 	bl	8002286 <_ZNKSt8equal_toIPvEclERKS0_S3_>
 8001dce:	4603      	mov	r3, r0
      }
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd90      	pop	{r4, r7, pc}

08001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fa62 	bl	80022b0 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKPvjELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b089      	sub	sp, #36	@ 0x24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	7239      	strb	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
      if (size() <= __small_size_threshold())
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff ff95 	bl	8001d32 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	f7ff ff9e 	bl	8001d4a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	429c      	cmp	r4, r3
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d014      	beq.n	8001e48 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x52>
	  __prev_n = _M_find_before_node(__k);
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fa54 	bl	80022ce <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_>
 8001e26:	61f8      	str	r0, [r7, #28]
	  if (!__prev_n)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x3c>
	    return 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e02a      	b.n	8001e88 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x92>
	  __n = static_cast<__node_ptr>(__prev_n->_M_nxt);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	61bb      	str	r3, [r7, #24]
	  __bkt = _M_bucket_index(*__n);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fa71 	bl	8002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8001e44:	6178      	str	r0, [r7, #20]
 8001e46:	e018      	b.n	8001e7a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x84>
	  __hash_code __code = this->_M_hash_code(__k);
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fe87 	bl	8001b5e <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS3_>
 8001e50:	6138      	str	r0, [r7, #16]
	  __bkt = _M_bucket_index(__code);
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff fe96 	bl	8001b86 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001e5a:	6178      	str	r0, [r7, #20]
	  __prev_n = _M_find_before_node(__bkt, __k, __code);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8a0 	bl	8001fa8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j>
 8001e68:	61f8      	str	r0, [r7, #28]
	  if (!__prev_n)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x7e>
	    return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e009      	b.n	8001e88 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseESt17integral_constantIbLb1EERS2_+0x92>
	  __n = static_cast<__node_ptr>(__prev_n->_M_nxt);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      _M_erase(__bkt, __prev_n, __n);
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa61 	bl	8002348 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE>
      return 1;
 8001e86:	2301      	movs	r3, #1
    }
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3724      	adds	r7, #36	@ 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}

08001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 faa7 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f8b7 	bl	8002032 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f000 faa8 	bl	800241e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fab1 	bl	8002438 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}

08001ede <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3318      	adds	r3, #24
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8001f1a:	68b8      	ldr	r0, [r7, #8]
 8001f1c:	f000 faa2 	bl	8002464 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8001f20:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fa6f 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 faa3 	bl	800247c <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKPvjELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fab5 	bl	80024ae <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 faa4 	bl	8002496 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fab5 	bl	80024cc <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIPvELb1EE7_M_cgetEv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZNKSt4hashIPvEclES0_>:
  /// Partial specializations for pointer types.
  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f95a 	bl	8001252 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x26>
	return nullptr;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e02d      	b.n	800202a <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa80 	bl	80024e2 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb0EEE>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x44>
	    return __prev_p;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	e01e      	b.n	800202a <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00c      	beq.n	800200e <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x66>
 8001ff4:	6938      	ldr	r0, [r7, #16]
 8001ff6:	f7ff ff4b 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f990 	bl	8002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 8002006:	4602      	mov	r2, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4293      	cmp	r3, r2
 800200c:	d001      	beq.n	8002012 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x6a>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x6c>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x7e>
	  __prev_p = __p;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 800201c:	6938      	ldr	r0, [r7, #16]
 800201e:	f7ff ff37 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 8002022:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8002024:	e7d6      	b.n	8001fd4 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS2_j+0x2c>
	    break;
 8002026:	bf00      	nop
      return nullptr;
 8002028:	2300      	movs	r3, #0
    }
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>:
      _M_valptr() noexcept
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fa6d 	bl	800251c <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE6_M_ptrEv>
 8002042:	4603      	mov	r3, r0
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZNSt11_Tuple_implILj0EJRKPvEEC1ES2_>:
      _Tuple_impl(const _Head& __head)
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fa6a 	bl	8002534 <_ZNSt10_Head_baseILj0ERKPvLb0EEC1ES2_>
      { }
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_ZSt7forwardISt5tupleIJRKPvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZNSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEC1Ev>:
    struct _Hash_node
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f8bd 	bl	8001236 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS4_EESD_IJEEEEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 80020c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f995 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa36 	bl	8002552 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE8allocateERS7_j>
 80020e6:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f000 fa41 	bl	8002570 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_S8_>
 80020ee:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4619      	mov	r1, r3
 80020f4:	200c      	movs	r0, #12
 80020f6:	f7ff f892 	bl	800121e <_ZnwjPv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ffd5 	bl	80020ac <_ZNSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f97f 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 8002108:	4604      	mov	r4, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3304      	adds	r3, #4
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff8f 	bl	8002032 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>
 8002114:	4605      	mov	r5, r0
 8002116:	68b8      	ldr	r0, [r7, #8]
 8002118:	f7ff ffa7 	bl	800206a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800211c:	4606      	mov	r6, r0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffae 	bl	8002080 <_ZSt7forwardISt5tupleIJRKPvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002124:	4680      	mov	r8, r0
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f7ff ffb5 	bl	8002096 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800212c:	4603      	mov	r3, r0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4643      	mov	r3, r8
 8002132:	4632      	mov	r2, r6
 8002134:	4629      	mov	r1, r5
 8002136:	4620      	mov	r0, r4
 8002138:	f000 fa25 	bl	8002586 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESD_IJEEEEEvRS7_PT_DpOT0_>
	    return __n;
 800213c:	693b      	ldr	r3, [r7, #16]
      }
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002148 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8002154:	461a      	mov	r2, r3
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fa41 	bl	80025e0 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
      { }
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d011      	beq.n	80021be <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]
    }
 80021bc:	e022      	b.n	8002204 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00f      	beq.n	80021f4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fe59 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	3304      	adds	r3, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f89e 	bl	8002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 80021ea:	4603      	mov	r3, r0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4423      	add	r3, r4
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	3208      	adds	r2, #8
 8002202:	601a      	str	r2, [r3, #0]
    }
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}

0800220c <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIPvEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 8002210:	2300      	movs	r3, #0
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_ZNSt8__detail19_Node_iterator_baseISt4pairIKPvjELb0EE7_M_incrEv>:
      _M_incr() noexcept
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe31 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa2f 	bl	80026a8 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIPvELb1EE7_M_cgetEv>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE4_M_vEv>:
      _M_v() const noexcept
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa2e 	bl	80026be <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>
 8002262:	4603      	mov	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKPvjEEEONS0_10__1st_typeIT_E4typeEOS9_>:
      operator()(_Tp&& __x) const noexcept
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f000 fa2e 	bl	80026d8 <_ZSt7forwardIRKSt4pairIKPvjEEOT_RNSt16remove_referenceIS6_E4typeE>
 800227c:	4603      	mov	r3, r0
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_ZNKSt8equal_toIPvEclERKS0_S3_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKPvjELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
      __node_base_ptr __prev_p = &_M_before_begin;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3308      	adds	r3, #8
 80022dc:	60fb      	str	r3, [r7, #12]
      if (!__prev_p->_M_nxt)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x1c>
	return nullptr;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e019      	b.n	800231e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x50>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	e011      	b.n	8002316 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x48>
	  if (this->_M_key_equals(__k, *__p))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3304      	adds	r3, #4
 80022f6:	461a      	mov	r2, r3
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fd4c 	bl	8001d98 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb0EEE>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x3c>
	    return __prev_p;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	e009      	b.n	800231e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x50>
	  __prev_p = __p;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	60fb      	str	r3, [r7, #12]
	   __p = __p->_M_next())
 800230e:	68b8      	ldr	r0, [r7, #8]
 8002310:	f7ff fdbe 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 8002314:	60b8      	str	r0, [r7, #8]
	   __p != nullptr;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeERS2_+0x24>
      return nullptr;
 800231c:	2300      	movs	r3, #0
    }
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	461a      	mov	r2, r3
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f9d8 	bl	80026ee <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 800233e:	4603      	mov	r3, r0
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
      if (__prev_n == _M_buckets[__bkt])
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d119      	bne.n	800239c <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x54>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f7ff fd91 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 800236e:	4604      	mov	r4, r0
	  __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x46>
	  __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f7ff fd89 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 800237e:	4603      	mov	r3, r0
 8002380:	3304      	adds	r3, #4
 8002382:	4619      	mov	r1, r3
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ffce 	bl	8002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 800238a:	4603      	mov	r3, r0
 800238c:	e000      	b.n	8002390 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x48>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 800238e:	2300      	movs	r3, #0
 8002390:	4622      	mov	r2, r4
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f9cc 	bl	8002732 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj>
 800239a:	e018      	b.n	80023ce <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
      else if (__n->_M_nxt)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d014      	beq.n	80023ce <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	  size_type __next_bkt = _M_bucket_index(*__n->_M_next());
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f7ff fd73 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	3304      	adds	r3, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7ff ffb8 	bl	8002326 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb0EEE>
 80023b6:	6178      	str	r0, [r7, #20]
	  if (__next_bkt != __bkt)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d006      	beq.n	80023ce <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb0EEE+0x86>
	    _M_buckets[__next_bkt] = __prev_n;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
      __prev_n->_M_nxt = __n->_M_nxt;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
      iterator __result(__n->_M_next());
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f7ff fd5a 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 80023dc:	4602      	mov	r2, r0
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fcf7 	bl	8001dd8 <_ZNSt8__detail14_Node_iteratorISt4pairIKPvjELb0ELb0EEC1EPNS_10_Hash_nodeIS4_Lb0EEE>
      this->_M_deallocate_node(__n);
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fd5b 	bl	8001ea8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE18_M_deallocate_nodeEPS6_>
      --_M_element_count;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	60da      	str	r2, [r3, #12]
      return __result;
 80023fc:	693b      	ldr	r3, [r7, #16]
    }
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}

08002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9c7 	bl	80027a2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EE6_M_getEv>
 8002414:	4603      	mov	r3, r0
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE7destroyIS5_EEvRS7_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f9c4 	bl	80027b8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE7destroyIS5_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8002442:	6838      	ldr	r0, [r7, #0]
 8002444:	f000 f9c3 	bl	80027ce <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEES6_Lb0EE10pointer_toERS6_>
 8002448:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffdb 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 8002450:	4603      	mov	r3, r0
 8002452:	2201      	movs	r2, #1
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f8b3 	bl	80025c2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE10deallocateERS7_PS6_j>
    }
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9ba 	bl	80027e6 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8002472:	4603      	mov	r3, r0
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKPvjELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9b9 	bl	80027fe <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f9b8 	bl	8002814 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f9b3 	bl	800282a <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIPvELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9a9 	bl	800284a <_ZNSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x30>
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff fc48 	bl	8001d98 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb0EEE>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x30>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <_ZNKSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb0EEE+0x32>
 8002512:	2300      	movs	r3, #0
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f99c 	bl	8002862 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE7_M_addrEv>
 800252a:	4603      	mov	r3, r0
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZNSt10_Head_baseILj0ERKPvLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800255c:	2200      	movs	r2, #0
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f989 	bl	8002878 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE8allocateEjPKv>
 8002566:	4603      	mov	r3, r0
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_S8_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8002578:	687b      	ldr	r3, [r7, #4]
    }
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002586:	b5b0      	push	{r4, r5, r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af02      	add	r7, sp, #8
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fd68 	bl	800206a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800259a:	4604      	mov	r4, r0
 800259c:	6838      	ldr	r0, [r7, #0]
 800259e:	f7ff fd6f 	bl	8002080 <_ZSt7forwardISt5tupleIJRKPvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80025a2:	4605      	mov	r5, r0
 80025a4:	6a38      	ldr	r0, [r7, #32]
 80025a6:	f7ff fd76 	bl	8002096 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80025aa:	4603      	mov	r3, r0
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	462b      	mov	r3, r5
 80025b0:	4622      	mov	r2, r4
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f99d 	bl	80028f4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESC_IJEEEEEvPT_DpOT0_>
	}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}

080025c2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f9b6 	bl	8002944 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE10deallocateEPS6_j>
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f9bb 	bl	800296a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80025f4:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff fa6b 	bl	8001ad2 <_ZNKSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80025fc:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
      while (__p)
 8002608:	e03e      	b.n	8002688 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 800260a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800260c:	f7ff fc40 	bl	8001e90 <_ZNKSt8__detail10_Hash_nodeISt4pairIKPvjELb0EE7_M_nextEv>
 8002610:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	3304      	adds	r3, #4
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4619      	mov	r1, r3
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f867 	bl	80026ee <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>
 8002620:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11a      	bne.n	8002666 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263c:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	3208      	adds	r2, #8
 800264a:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265e:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	e00e      	b.n	8002684 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002682:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1bd      	bne.n	800260a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff f928 	bl	80018e4 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	601a      	str	r2, [r3, #0]
    }
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIPvELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE9_M_valptrEv>:
      _M_valptr() const noexcept
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f96b 	bl	80029a4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE6_M_ptrEv>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZSt7forwardIRKSt4pairIKPvjEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fda9 	bl	8002254 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKPvjEE4_M_vEv>
 8002702:	4602      	mov	r2, r0
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fdae 	bl	800226c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKPvjEEEONS0_10__1st_typeIT_E4typeEOS9_>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff fa22 	bl	8001b5e <_ZNKSt8__detail15_Hash_code_baseIPvSt4pairIKS1_jENS_10_Select1stESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS3_>
 800271a:	4601      	mov	r1, r0
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fd95 	bl	8001252 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002728:	4603      	mov	r3, r0
      }
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
      if (!__next || __next_bkt != __bkt)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x1c>
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d023      	beq.n	8002796 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x64>
	  if (__next)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x3a>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	601a      	str	r2, [r3, #0]
	  if (&_M_before_begin == _M_buckets[__bkt])
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f103 0208 	add.w	r2, r3, #8
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d102      	bne.n	8002788 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb0EEEj+0x56>
	    _M_before_begin._M_nxt = __next;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	609a      	str	r2, [r3, #8]
	  _M_buckets[__bkt] = nullptr;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    }
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKPvjELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE7destroyIS5_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEES6_Lb0EE10pointer_toERS6_>:
      pointer_to(element_type& __r) noexcept
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8f0 	bl	80029bc <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_RS7_>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f0 	bl	80029d4 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4619      	mov	r1, r3
 800283c:	68b8      	ldr	r0, [r7, #8]
 800283e:	f003 fac0 	bl	8005dc2 <_ZdlPvj>
      }
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_ZNSt8__detail15_Hashtable_baseIPvSt4pairIKS1_jENS_10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
      { return true; }
 8002854:	2301      	movs	r3, #1
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE7_M_addrEv>:
      _M_addr() noexcept
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800286a:	687b      	ldr	r3, [r7, #4]
      }
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8b1 	bl	80029ec <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE11_M_max_sizeEv>
 800288a:	4602      	mov	r2, r0
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4293      	cmp	r3, r2
 8002890:	bf8c      	ite	hi
 8002892:	2301      	movhi	r3, #1
 8002894:	2300      	movls	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE8allocateEjPKv+0x58>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80028ae:	f003 faad 	bl	8005e0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80028b2:	f003 faa8 	bl	8005e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fa8f 	bl	8005de4 <_Znwj>
 80028c6:	4603      	mov	r3, r0
      }
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	15555555 	.word	0x15555555

080028d4 <_ZNSt5tupleIJRKPvEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f88f 	bl	8002a08 <_ZNSt11_Tuple_implILj0EJRKPvEEC1EOS3_>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESC_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4619      	mov	r1, r3
 8002906:	2008      	movs	r0, #8
 8002908:	f7fe fc89 	bl	800121e <_ZnwjPv>
 800290c:	4604      	mov	r4, r0
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fbab 	bl	800206a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f7ff fbb3 	bl	8002080 <_ZSt7forwardISt5tupleIJRKPvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800291a:	4602      	mov	r2, r0
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ffd6 	bl	80028d4 <_ZNSt5tupleIJRKPvEEC1EOS3_>
 8002928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800292a:	f7ff fbb4 	bl	8002096 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800292e:	f107 0214 	add.w	r2, r7, #20
 8002932:	4633      	mov	r3, r6
 8002934:	4629      	mov	r1, r5
 8002936:	4620      	mov	r0, r4
 8002938:	f000 f876 	bl	8002a28 <_ZNSt4pairIKPvjEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002944 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4619      	mov	r1, r3
 800295c:	68b8      	ldr	r0, [r7, #8]
 800295e:	f003 fa30 	bl	8005dc2 <_ZdlPvj>
      }
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3318      	adds	r3, #24
 800298e:	e005      	b.n	800299c <_ZNSt10_HashtableIPvSt4pairIKS0_jESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f85c 	bl	8002a50 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_allocate_bucketsEj>
 8002998:	4603      	mov	r3, r0
 800299a:	bf00      	nop
      }
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f87c 	bl	8002aaa <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE7_M_addrEv>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f87b 	bl	8002ac0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_RS7_>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	0aaaaaaa 	.word	0x0aaaaaaa

08002a08 <_ZNSt11_Tuple_implILj0EJRKPvEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	601a      	str	r2, [r3, #0]
      { }
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_ZNSt4pairIKPvjEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	7239      	strb	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002a36:	463a      	mov	r2, r7
 8002a38:	f88d 4000 	strb.w	r4, [sp]
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f848 	bl	8002ad6 <_ZNSt4pairIKPvjEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bdb0      	pop	{r4, r5, r7, pc}

08002a50 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fcd3 	bl	8002406 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKPvjELb0EEEEE17_M_node_allocatorEv>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fd07 	bl	800247c <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKPvjELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f848 	bl	8002b0a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8002a7a:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f000 f853 	bl	8002b28 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8002a82:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f003 fbf6 	bl	8006280 <memset>
      return __p;
 8002a94:	693c      	ldr	r4, [r7, #16]
    }
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fcfb 	bl	8002496 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8002aa0:	4623      	mov	r3, r4
    }
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}

08002aaa <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKPvjEE7_M_addrEv>:
      _M_addr() const noexcept
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8002ab2:	687b      	ldr	r3, [r7, #4]
      }
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKPvjELb0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_ZNSt4pairIKPvjEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f000 f82a 	bl	8002b3e <_ZSt3getILj0EJRKPvEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f833 	bl	8002b58 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8002af2:	4603      	mov	r3, r0
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
      { }
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002b14:	2200      	movs	r2, #0
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f828 	bl	8002b6e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8002b30:	687b      	ldr	r3, [r7, #4]
    }
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_ZSt3getILj0EJRKPvEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f839 	bl	8002bc0 <_ZSt12__get_helperILj0ERKPvJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f82c 	bl	8002bd8 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bf8c      	ite	hi
 8002b88:	2301      	movhi	r3, #1
 8002b8a:	2300      	movls	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba2:	d301      	bcc.n	8002ba8 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002ba4:	f003 f932 	bl	8005e0c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002ba8:	f003 f92d 	bl	8005e06 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 f917 	bl	8005de4 <_Znwj>
 8002bb6:	4603      	mov	r3, r0
      }
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZSt12__get_helperILj0ERKPvJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f811 	bl	8002bf0 <_ZNSt11_Tuple_implILj0EJRKPvEE7_M_headERS3_>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002be0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_ZNSt11_Tuple_implILj0EJRKPvEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f805 	bl	8002c0a <_ZNSt10_Head_baseILj0ERKPvLb0EE7_M_headERS3_>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZNSt10_Head_baseILj0ERKPvLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c26:	f000 fac0 	bl	80031aa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c2a:	f000 f80b 	bl	8002c44 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c2e:	f000 f8e9 	bl	8002e04 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002c32:	f000 f8b7 	bl	8002da4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002c36:	f000 f867 	bl	8002d08 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	App_Init();
 8002c3a:	f7fe f9d1 	bl	8000fe0 <App_Init>
	while(1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		App_Loop();
 8002c3e:	f7fe f9eb 	bl	8001018 <App_Loop>
 8002c42:	e7fc      	b.n	8002c3e <main+0x1c>

08002c44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b096      	sub	sp, #88	@ 0x58
 8002c48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	2244      	movs	r2, #68	@ 0x44
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fb14 	bl	8006280 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c6a:	f000 fddf 	bl	800382c <HAL_PWREx_ControlVoltageScaling>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8002c74:	f000 f910 	bl	8002e98 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002c78:	f000 fdba 	bl	80037f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c7c:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <SystemClock_Config+0xc0>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <SystemClock_Config+0xc0>)
 8002c84:	f023 0318 	bic.w	r3, r3, #24
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8002c8c:	2314      	movs	r3, #20
 8002c8e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c90:	2301      	movs	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c94:	2301      	movs	r3, #1
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c9c:	2360      	movs	r3, #96	@ 0x60
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002cac:	2328      	movs	r3, #40	@ 0x28
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	657b      	str	r3, [r7, #84]	@ 0x54
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fe09 	bl	80038d8 <HAL_RCC_OscConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8002ccc:	f000 f8e4 	bl	8002e98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	603b      	str	r3, [r7, #0]
					| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fa09 	bl	8004100 <HAL_RCC_ClockConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8002cf4:	f000 f8d0 	bl	8002e98 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002cf8:	f001 fe1c 	bl	8004934 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002cfc:	bf00      	nop
 8002cfe:	3758      	adds	r7, #88	@ 0x58
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000

08002d08 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d2c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d30:	224f      	movs	r2, #79	@ 0x4f
 8002d32:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002d3a:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d40:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d48:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d4e:	4814      	ldr	r0, [pc, #80]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d50:	f001 fef2 	bl	8004b38 <HAL_TIM_Base_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8002d5a:	f000 f89d 	bl	8002e98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d62:	613b      	str	r3, [r7, #16]
	if(HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480d      	ldr	r0, [pc, #52]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d6c:	f002 f892 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8002d76:	f000 f88f 	bl	8002e98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
	if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <MX_TIM2_Init+0x98>)
 8002d88:	f002 fa7e 	bl	8005288 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8002d92:	f000 f881 	bl	8002e98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200000b0 	.word	0x200000b0

08002da4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002daa:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <MX_USART2_UART_Init+0x5c>)
 8002dac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002db4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dca:	220c      	movs	r2, #12
 8002dcc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <MX_USART2_UART_Init+0x58>)
 8002de8:	f002 fad2 	bl	8005390 <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8002df2:	f000 f851 	bl	8002e98 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200000fc 	.word	0x200000fc
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e26:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e3e:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	4a10      	ldr	r2, [pc, #64]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <MX_GPIO_Init+0x8c>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2108      	movs	r1, #8
 8002e66:	480b      	ldr	r0, [pc, #44]	@ (8002e94 <MX_GPIO_Init+0x90>)
 8002e68:	f000 fc90 	bl	800378c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	4619      	mov	r1, r3
 8002e82:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <MX_GPIO_Init+0x90>)
 8002e84:	f000 fb18 	bl	80034b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002e88:	bf00      	nop
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48000400 	.word	0x48000400

08002e98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9c:	b672      	cpsid	i
}
 8002e9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <Error_Handler+0x8>

08002ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efc:	d113      	bne.n	8002f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_TIM_Base_MspInit+0x44>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	4a0b      	ldr	r2, [pc, #44]	@ (8002f30 <HAL_TIM_Base_MspInit+0x44>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_TIM_Base_MspInit+0x44>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	201c      	movs	r0, #28
 8002f1c:	f000 fa95 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f20:	201c      	movs	r0, #28
 8002f22:	f000 faae 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b09e      	sub	sp, #120	@ 0x78
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2254      	movs	r2, #84	@ 0x54
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f993 	bl	8006280 <memset>
  if(huart->Instance==USART2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_UART_MspInit+0xcc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d148      	bne.n	8002ff6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f64:	2302      	movs	r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fae9 	bl	8004548 <HAL_RCCEx_PeriphCLKConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f7c:	f7ff ff8c 	bl	8002e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f80:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a1f      	ldr	r2, [pc, #124]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa4:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <HAL_UART_MspInit+0xd0>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fce:	f000 fa73 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fec:	4619      	mov	r1, r3
 8002fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff2:	f000 fa61 	bl	80034b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ff6:	bf00      	nop
 8002ff8:	3778      	adds	r7, #120	@ 0x78
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40004400 	.word	0x40004400
 8003004:	40021000 	.word	0x40021000

08003008 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while(1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <NMI_Handler+0x4>

08003010 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while(1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while(1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <MemManage_Handler+0x4>

08003020 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while(1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while(1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <UsageFault_Handler+0x4>

08003030 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800305e:	f000 f8f9 	bl	8003254 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	App_TIM2_IRQHandler();
 800306c:	f7fd ffe0 	bl	8001030 <App_TIM2_IRQHandler>
	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <TIM2_IRQHandler+0x14>)
 8003072:	f001 fe0d 	bl	8004c90 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200000b0 	.word	0x200000b0

08003080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return 1;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_kill>:

int _kill(int pid, int sig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800309a:	f003 f94d 	bl	8006338 <__errno>
 800309e:	4603      	mov	r3, r0
 80030a0:	2216      	movs	r2, #22
 80030a2:	601a      	str	r2, [r3, #0]
  return -1;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_exit>:

void _exit (int status)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ffe7 	bl	8003090 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030c2:	bf00      	nop
 80030c4:	e7fd      	b.n	80030c2 <_exit+0x12>
	...

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f003 f91e 	bl	8006338 <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	@ (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	@ (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20010000 	.word	0x20010000
 8003128:	00000400 	.word	0x00000400
 800312c:	20000184 	.word	0x20000184
 8003130:	20000390 	.word	0x20000390

08003134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <SystemInit+0x20>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	4a05      	ldr	r2, [pc, #20]	@ (8003154 <SystemInit+0x20>)
 8003140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003190 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800315c:	f7ff ffea 	bl	8003134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003160:	480c      	ldr	r0, [pc, #48]	@ (8003194 <LoopForever+0x6>)
  ldr r1, =_edata
 8003162:	490d      	ldr	r1, [pc, #52]	@ (8003198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <LoopForever+0xe>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003168:	e002      	b.n	8003170 <LoopCopyDataInit>

0800316a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800316c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316e:	3304      	adds	r3, #4

08003170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003174:	d3f9      	bcc.n	800316a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003176:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003178:	4c0a      	ldr	r4, [pc, #40]	@ (80031a4 <LoopForever+0x16>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800317c:	e001      	b.n	8003182 <LoopFillZerobss>

0800317e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003180:	3204      	adds	r2, #4

08003182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003184:	d3fb      	bcc.n	800317e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003186:	f003 f8dd 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800318a:	f7ff fd4a 	bl	8002c22 <main>

0800318e <LoopForever>:

LoopForever:
    b LoopForever
 800318e:	e7fe      	b.n	800318e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003190:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003198:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800319c:	08007308 	.word	0x08007308
  ldr r2, =_sbss
 80031a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80031a4:	20000390 	.word	0x20000390

080031a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC1_IRQHandler>

080031aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b4:	2003      	movs	r0, #3
 80031b6:	f000 f93d 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ba:	2000      	movs	r0, #0
 80031bc:	f000 f80e 	bl	80031dc <HAL_InitTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	71fb      	strb	r3, [r7, #7]
 80031ca:	e001      	b.n	80031d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031cc:	f7ff fe6a 	bl	8002ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d0:	79fb      	ldrb	r3, [r7, #7]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <HAL_InitTick+0x6c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031f0:	4b16      	ldr	r3, [pc, #88]	@ (800324c <HAL_InitTick+0x70>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <HAL_InitTick+0x6c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f949 	bl	800349e <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0f      	cmp	r3, #15
 8003216:	d809      	bhi.n	800322c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003218:	2200      	movs	r2, #0
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003220:	f000 f913 	bl	800344a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003224:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <HAL_InitTick+0x74>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e007      	b.n	800323c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e004      	b.n	800323c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e001      	b.n	800323c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000008 	.word	0x20000008
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_IncTick+0x20>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_IncTick+0x24>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4413      	add	r3, r2
 8003264:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <HAL_IncTick+0x24>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000008 	.word	0x20000008
 8003278:	20000188 	.word	0x20000188

0800327c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <HAL_GetTick+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000188 	.word	0x20000188

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	@ (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	@ (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	@ (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	@ (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	@ (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003414:	f7ff ff8e 	bl	8003334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff29 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff3e 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff8e 	bl	8003388 <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5d 	bl	8003334 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff31 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa2 	bl	80033f0 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c6:	e148      	b.n	800375a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 813a 	beq.w	8003754 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d005      	beq.n	80034f8 <HAL_GPIO_Init+0x40>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d130      	bne.n	800355a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352e:	2201      	movs	r2, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0201 	and.w	r2, r3, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b03      	cmp	r3, #3
 8003564:	d017      	beq.n	8003596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d123      	bne.n	80035ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	6939      	ldr	r1, [r7, #16]
 80035e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8094 	beq.w	8003754 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b52      	ldr	r3, [pc, #328]	@ (8003778 <HAL_GPIO_Init+0x2c0>)
 800362e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003630:	4a51      	ldr	r2, [pc, #324]	@ (8003778 <HAL_GPIO_Init+0x2c0>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6613      	str	r3, [r2, #96]	@ 0x60
 8003638:	4b4f      	ldr	r3, [pc, #316]	@ (8003778 <HAL_GPIO_Init+0x2c0>)
 800363a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003644:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <HAL_GPIO_Init+0x2c4>)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_Init+0x1d4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a43      	ldr	r2, [pc, #268]	@ (8003780 <HAL_GPIO_Init+0x2c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_Init+0x1d0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <HAL_GPIO_Init+0x2cc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_Init+0x1cc>
 8003680:	2302      	movs	r3, #2
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x1d6>
 8003684:	2307      	movs	r3, #7
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x1d6>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x1d6>
 800368c:	2300      	movs	r3, #0
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800369e:	4937      	ldr	r1, [pc, #220]	@ (800377c <HAL_GPIO_Init+0x2c4>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ac:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fa:	4a23      	ldr	r2, [pc, #140]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003700:	4b21      	ldr	r3, [pc, #132]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003724:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800372a:	4b17      	ldr	r3, [pc, #92]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800374e:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <HAL_GPIO_Init+0x2d0>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f aeaf 	bne.w	80034c8 <HAL_GPIO_Init+0x10>
  }
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
 8003798:	4613      	mov	r3, r2
 800379a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800379c:	787b      	ldrb	r3, [r7, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4013      	ands	r3, r2
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43d9      	mvns	r1, r3
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	400b      	ands	r3, r1
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40007000 	.word	0x40007000

08003810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003814:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <HAL_PWREx_GetVoltageRange+0x18>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800383a:	d130      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800383c:	4b23      	ldr	r3, [pc, #140]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003848:	d038      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800384a:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003852:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003858:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2232      	movs	r2, #50	@ 0x32
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	3301      	adds	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003870:	e002      	b.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003878:	4b14      	ldr	r3, [pc, #80]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003884:	d102      	bne.n	800388c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f2      	bne.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003898:	d110      	bne.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800389e:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038aa:	d007      	beq.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000
 80038d0:	20000000 	.word	0x20000000
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f000 bc02 	b.w	80040f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ec:	4b96      	ldr	r3, [pc, #600]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f6:	4b94      	ldr	r3, [pc, #592]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80e4 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_RCC_OscConfig+0x4c>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	f040 808b 	bne.w	8003a32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b01      	cmp	r3, #1
 8003920:	f040 8087 	bne.w	8003a32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003924:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x64>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e3d9      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	4b81      	ldr	r3, [pc, #516]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_RCC_OscConfig+0x7e>
 800394c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003954:	e005      	b.n	8003962 <HAL_RCC_OscConfig+0x8a>
 8003956:	4b7c      	ldr	r3, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003962:	4293      	cmp	r3, r2
 8003964:	d223      	bcs.n	80039ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fd8c 	bl	8004488 <RCC_SetFlashLatencyFromMSIRange>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e3ba      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397a:	4b73      	ldr	r3, [pc, #460]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a72      	ldr	r2, [pc, #456]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b70      	ldr	r3, [pc, #448]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	496d      	ldr	r1, [pc, #436]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003998:	4b6b      	ldr	r3, [pc, #428]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	4968      	ldr	r1, [pc, #416]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	e025      	b.n	80039fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b66      	ldr	r3, [pc, #408]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4960      	ldr	r1, [pc, #384]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	495b      	ldr	r1, [pc, #364]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fd4c 	bl	8004488 <RCC_SetFlashLatencyFromMSIRange>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e37a      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039fa:	f000 fc81 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b51      	ldr	r3, [pc, #324]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4950      	ldr	r1, [pc, #320]	@ (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_RCC_OscConfig+0x278>)
 8003a18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fbdc 	bl	80031dc <HAL_InitTick>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d052      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	e35e      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d032      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a42      	ldr	r2, [pc, #264]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a46:	f7ff fc19 	bl	800327c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4e:	f7ff fc15 	bl	800327c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e347      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a60:	4b39      	ldr	r3, [pc, #228]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a35      	ldr	r2, [pc, #212]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b33      	ldr	r3, [pc, #204]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4930      	ldr	r1, [pc, #192]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	492b      	ldr	r1, [pc, #172]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
 8003a9e:	e01a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa0:	4b29      	ldr	r3, [pc, #164]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aac:	f7ff fbe6 	bl	800327c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab4:	f7ff fbe2 	bl	800327c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e314      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1dc>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d073      	beq.n	8003bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_OscConfig+0x21c>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d10e      	bne.n	8003b0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d063      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d15f      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e2f1      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x24c>
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e025      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCC_OscConfig+0x280>
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a05      	ldr	r2, [pc, #20]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a02      	ldr	r2, [pc, #8]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e013      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08006e68 	.word	0x08006e68
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004
 8003b58:	4ba0      	ldr	r3, [pc, #640]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b9d      	ldr	r3, [pc, #628]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9c      	ldr	r2, [pc, #624]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7ff fb80 	bl	800327c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff fb7c 	bl	800327c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e2ae      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2a8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7ff fb6c 	bl	800327c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7ff fb68 	bl	800327c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e29a      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2d0>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d060      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x310>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d116      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x328>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e277      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	4973      	ldr	r1, [pc, #460]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e040      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d023      	beq.n	8003c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7ff fb27 	bl	800327c <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7ff fb23 	bl	800327c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e255      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c44:	4b65      	ldr	r3, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b62      	ldr	r3, [pc, #392]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	495f      	ldr	r1, [pc, #380]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7ff fb03 	bl	800327c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7ff faff 	bl	800327c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e231      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cac:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7ff fade 	bl	800327c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7ff fada 	bl	800327c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e20c      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3ec>
 8003ce4:	e01b      	b.n	8003d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cec:	4a3b      	ldr	r2, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7ff fac1 	bl	800327c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7ff fabd 	bl	800327c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1ef      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d30:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	4a26      	ldr	r2, [pc, #152]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d48:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d118      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d70:	f7ff fa84 	bl	800327c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7ff fa80 	bl	800327c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1b2      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4d8>
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dae:	e029      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_OscConfig+0x50c>
 8003db8:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	4a07      	ldr	r2, [pc, #28]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	4a03      	ldr	r2, [pc, #12]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
 8003de4:	4b9a      	ldr	r3, [pc, #616]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a99      	ldr	r2, [pc, #612]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df4:	4b96      	ldr	r3, [pc, #600]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	4a95      	ldr	r2, [pc, #596]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7ff fa36 	bl	800327c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7ff fa32 	bl	800327c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e162      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b89      	ldr	r3, [pc, #548]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x53c>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7ff fa1f 	bl	800327c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7ff fa1b 	bl	800327c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e14b      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b7d      	ldr	r3, [pc, #500]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b78      	ldr	r3, [pc, #480]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	4a77      	ldr	r2, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03c      	beq.n	8003efe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8c:	4b70      	ldr	r3, [pc, #448]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	4a6f      	ldr	r2, [pc, #444]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7ff f9ee 	bl	800327c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea4:	f7ff f9ea 	bl	800327c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e11c      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eb6:	4b66      	ldr	r3, [pc, #408]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ef      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x5cc>
 8003ec4:	e01b      	b.n	8003efe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec6:	4b62      	ldr	r3, [pc, #392]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ecc:	4a60      	ldr	r2, [pc, #384]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7ff f9d1 	bl	800327c <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ede:	f7ff f9cd 	bl	800327c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ff      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef0:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80f3 	beq.w	80040ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f040 80c9 	bne.w	80040a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f12:	4b4f      	ldr	r3, [pc, #316]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d12c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	3b01      	subs	r3, #1
 8003f32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d123      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d11b      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d113      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	3b01      	subs	r3, #1
 8003f66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d109      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d06b      	beq.n	8004058 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d062      	beq.n	800404c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f86:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0ac      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f96:	4b2e      	ldr	r3, [pc, #184]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa2:	f7ff f96b 	bl	800327c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7ff f967 	bl	800327c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e099      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc8:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b21      	ldr	r3, [pc, #132]	@ (8004054 <HAL_RCC_OscConfig+0x77c>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fe2:	0212      	lsls	r2, r2, #8
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fea:	0852      	lsrs	r2, r2, #1
 8003fec:	3a01      	subs	r2, #1
 8003fee:	0552      	lsls	r2, r2, #21
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0652      	lsls	r2, r2, #25
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004002:	06d2      	lsls	r2, r2, #27
 8004004:	430a      	orrs	r2, r1
 8004006:	4912      	ldr	r1, [pc, #72]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8004008:	4313      	orrs	r3, r2
 800400a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800400c:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0f      	ldr	r2, [pc, #60]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004022:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004024:	f7ff f92a 	bl	800327c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7ff f926 	bl	800327c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e058      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <HAL_RCC_OscConfig+0x778>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800404a:	e050      	b.n	80040ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e04f      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
 8004050:	40021000 	.word	0x40021000
 8004054:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004058:	4b27      	ldr	r3, [pc, #156]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d144      	bne.n	80040ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004064:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b21      	ldr	r3, [pc, #132]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a20      	ldr	r2, [pc, #128]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800407c:	f7ff f8fe 	bl	800327c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7ff f8fa 	bl	800327c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e02c      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x7ac>
 80040a2:	e024      	b.n	80040ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d01f      	beq.n	80040ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 80040b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7ff f8e1 	bl	800327c <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7ff f8dd 	bl	800327c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e00f      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d0:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4905      	ldr	r1, [pc, #20]	@ (80040f8 <HAL_RCC_OscConfig+0x820>)
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCC_OscConfig+0x824>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
 80040e8:	e001      	b.n	80040ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	feeefffc 	.word	0xfeeefffc

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0e7      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b75      	ldr	r3, [pc, #468]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b72      	ldr	r3, [pc, #456]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	4970      	ldr	r1, [pc, #448]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b6e      	ldr	r3, [pc, #440]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cf      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b66      	ldr	r3, [pc, #408]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800415c:	429a      	cmp	r2, r3
 800415e:	d908      	bls.n	8004172 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b63      	ldr	r3, [pc, #396]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4960      	ldr	r1, [pc, #384]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04c      	beq.n	8004218 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	4b5a      	ldr	r3, [pc, #360]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0a6      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419e:	4b54      	ldr	r3, [pc, #336]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d115      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e09a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b6:	4b4e      	ldr	r3, [pc, #312]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e08e      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c6:	4b4a      	ldr	r3, [pc, #296]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e086      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d6:	4b46      	ldr	r3, [pc, #280]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f023 0203 	bic.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4943      	ldr	r1, [pc, #268]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e8:	f7ff f848 	bl	800327c <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f0:	f7ff f844 	bl	800327c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e06e      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4b3a      	ldr	r3, [pc, #232]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 020c 	and.w	r2, r3, #12
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d1eb      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004230:	429a      	cmp	r2, r3
 8004232:	d208      	bcs.n	8004246 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b2e      	ldr	r3, [pc, #184]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	492b      	ldr	r1, [pc, #172]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d210      	bcs.n	8004276 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004254:	4b25      	ldr	r3, [pc, #148]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 0207 	bic.w	r2, r3, #7
 800425c:	4923      	ldr	r1, [pc, #140]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <HAL_RCC_ClockConfig+0x1ec>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d001      	beq.n	8004276 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e036      	b.n	80042e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004282:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4918      	ldr	r1, [pc, #96]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4910      	ldr	r1, [pc, #64]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042b4:	f000 f824 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	490b      	ldr	r1, [pc, #44]	@ (80042f4 <HAL_RCC_ClockConfig+0x1f4>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f8>)
 80042d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <HAL_RCC_ClockConfig+0x1fc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe ff7f 	bl	80031dc <HAL_InitTick>
 80042de:	4603      	mov	r3, r0
 80042e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80042e2:	7afb      	ldrb	r3, [r7, #11]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40021000 	.word	0x40021000
 80042f4:	08006e68 	.word	0x08006e68
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	@ 0x24
 8004304:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430e:	4b3e      	ldr	r3, [pc, #248]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004318:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x34>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d121      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d11e      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004334:	4b34      	ldr	r3, [pc, #208]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004340:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	e005      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004350:	4b2d      	ldr	r3, [pc, #180]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800435c:	4a2b      	ldr	r2, [pc, #172]	@ (800440c <HAL_RCC_GetSysClockFreq+0x10c>)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004364:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10d      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b04      	cmp	r3, #4
 8004376:	d102      	bne.n	800437e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004378:	4b25      	ldr	r3, [pc, #148]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x110>)
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e004      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d101      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004384:	4b23      	ldr	r3, [pc, #140]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x114>)
 8004386:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d134      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800438e:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d003      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0xac>
 80043a4:	e005      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x110>)
 80043a8:	617b      	str	r3, [r7, #20]
      break;
 80043aa:	e005      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ae:	617b      	str	r3, [r7, #20]
      break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	617b      	str	r3, [r7, #20]
      break;
 80043b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	3301      	adds	r3, #1
 80043c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	fb03 f202 	mul.w	r2, r3, r2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043de:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	0e5b      	lsrs	r3, r3, #25
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	3301      	adds	r3, #1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043f8:	69bb      	ldr	r3, [r7, #24]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3724      	adds	r7, #36	@ 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	08006e80 	.word	0x08006e80
 8004410:	00f42400 	.word	0x00f42400
 8004414:	007a1200 	.word	0x007a1200

08004418 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	@ (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000000 	.word	0x20000000

08004430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004434:	f7ff fff0 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	08006e78 	.word	0x08006e78

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004460:	f7ff ffda 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0adb      	lsrs	r3, r3, #11
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4904      	ldr	r1, [pc, #16]	@ (8004484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	08006e78 	.word	0x08006e78

08004488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004494:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044a0:	f7ff f9b6 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 80044a4:	6178      	str	r0, [r7, #20]
 80044a6:	e014      	b.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a8:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b4:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044c0:	f7ff f9a6 	bl	8003810 <HAL_PWREx_GetVoltageRange>
 80044c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d8:	d10b      	bne.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d919      	bls.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80044e4:	d902      	bls.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e6:	2302      	movs	r3, #2
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e013      	b.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044ec:	2301      	movs	r3, #1
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e010      	b.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d902      	bls.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044f8:	2303      	movs	r3, #3
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	e00a      	b.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b80      	cmp	r3, #128	@ 0x80
 8004502:	d102      	bne.n	800450a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004504:	2302      	movs	r3, #2
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e004      	b.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b70      	cmp	r3, #112	@ 0x70
 800450e:	d101      	bne.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004510:	2301      	movs	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 0207 	bic.w	r2, r3, #7
 800451c:	4909      	ldr	r1, [pc, #36]	@ (8004544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	40022000 	.word	0x40022000

08004548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004550:	2300      	movs	r3, #0
 8004552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004554:	2300      	movs	r3, #0
 8004556:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004560:	2b00      	cmp	r3, #0
 8004562:	d031      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800456c:	d01a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800456e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004572:	d814      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004578:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800457c:	d10f      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800457e:	4b5d      	ldr	r3, [pc, #372]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4a5c      	ldr	r2, [pc, #368]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f9de 	bl	8004954 <RCCEx_PLLSAI1_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	74fb      	strb	r3, [r7, #19]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ac:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	494e      	ldr	r1, [pc, #312]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 809e 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045da:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b40      	ldr	r3, [pc, #256]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	4a3f      	ldr	r2, [pc, #252]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fc:	4b3d      	ldr	r3, [pc, #244]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460c:	4b3a      	ldr	r3, [pc, #232]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a39      	ldr	r2, [pc, #228]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004618:	f7fe fe30 	bl	800327c <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fe fe2c 	bl	800327c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	74fb      	strb	r3, [r7, #19]
        break;
 8004632:	e005      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004634:	4b30      	ldr	r3, [pc, #192]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15a      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004646:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01e      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	429a      	cmp	r2, r3
 8004660:	d019      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800466e:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800467e:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800468e:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d016      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fdec 	bl	800327c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a6:	e00b      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fe fde8 	bl	800327c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d902      	bls.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	74fb      	strb	r3, [r7, #19]
            break;
 80046be:	e006      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0ec      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d4:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e2:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004700:	7c7b      	ldrb	r3, [r7, #17]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004706:	4b8a      	ldr	r3, [pc, #552]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470a:	4a89      	ldr	r2, [pc, #548]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471e:	4b84      	ldr	r3, [pc, #528]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004724:	f023 0203 	bic.w	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4980      	ldr	r1, [pc, #512]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004740:	4b7b      	ldr	r3, [pc, #492]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004746:	f023 020c 	bic.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	4978      	ldr	r1, [pc, #480]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004762:	4b73      	ldr	r3, [pc, #460]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004768:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	496f      	ldr	r1, [pc, #444]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004784:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004792:	4967      	ldr	r1, [pc, #412]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a6:	4b62      	ldr	r3, [pc, #392]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	495e      	ldr	r1, [pc, #376]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	4956      	ldr	r1, [pc, #344]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ea:	4b51      	ldr	r3, [pc, #324]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	494d      	ldr	r1, [pc, #308]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d028      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800480c:	4b48      	ldr	r3, [pc, #288]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	4945      	ldr	r1, [pc, #276]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800482a:	d106      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a3f      	ldr	r2, [pc, #252]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004836:	60d3      	str	r3, [r2, #12]
 8004838:	e011      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004842:	d10c      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f882 	bl	8004954 <RCCEx_PLLSAI1_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d028      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486a:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	492d      	ldr	r1, [pc, #180]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488a:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4a28      	ldr	r2, [pc, #160]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004894:	60d3      	str	r3, [r2, #12]
 8004896:	e011      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f853 	bl	8004954 <RCCEx_PLLSAI1_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01c      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d6:	4916      	ldr	r1, [pc, #88]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e6:	d10c      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f830 	bl	8004954 <RCCEx_PLLSAI1_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048fe:	7cfb      	ldrb	r3, [r7, #19]
 8004900:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491c:	4904      	ldr	r1, [pc, #16]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004924:	7cbb      	ldrb	r3, [r7, #18]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a04      	ldr	r2, [pc, #16]	@ (8004950 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000

08004954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004962:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800496e:	4b71      	ldr	r3, [pc, #452]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
       ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004986:	4b6b      	ldr	r3, [pc, #428]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
       ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d047      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e044      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d018      	beq.n	80049da <RCCEx_PLLSAI1_Config+0x86>
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d825      	bhi.n	80049f8 <RCCEx_PLLSAI1_Config+0xa4>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d002      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x62>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d009      	beq.n	80049c8 <RCCEx_PLLSAI1_Config+0x74>
 80049b4:	e020      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c6:	e01a      	b.n	80049fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e013      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049da:	4b56      	ldr	r3, [pc, #344]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e6:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f6:	e006      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e004      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	430b      	orrs	r3, r1
 8004a24:	4943      	ldr	r1, [pc, #268]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d17c      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a30:	4b40      	ldr	r3, [pc, #256]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3f      	ldr	r2, [pc, #252]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fe fc1e 	bl	800327c <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a42:	e009      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a44:	f7fe fc1a 	bl	800327c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
        break;
 8004a56:	e005      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a58:	4b36      	ldr	r3, [pc, #216]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ef      	bne.n	8004a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d15f      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a70:	4b30      	ldr	r3, [pc, #192]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	492a      	ldr	r1, [pc, #168]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
 8004a90:	e027      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d112      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a98:	4b26      	ldr	r3, [pc, #152]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004aa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6892      	ldr	r2, [r2, #8]
 8004aa8:	0211      	lsls	r1, r2, #8
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6912      	ldr	r2, [r2, #16]
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0552      	lsls	r2, r2, #21
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	491f      	ldr	r1, [pc, #124]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	610b      	str	r3, [r1, #16]
 8004abc:	e011      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ac6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	0211      	lsls	r1, r2, #8
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6952      	ldr	r2, [r2, #20]
 8004ad4:	0852      	lsrs	r2, r2, #1
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0652      	lsls	r2, r2, #25
 8004ada:	430a      	orrs	r2, r1
 8004adc:	4915      	ldr	r1, [pc, #84]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ae2:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fe fbc5 	bl	800327c <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004af4:	e009      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af6:	f7fe fbc1 	bl	800327c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d902      	bls.n	8004b0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	73fb      	strb	r3, [r7, #15]
          break;
 8004b08:	e005      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ef      	beq.n	8004af6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e049      	b.n	8004bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fe f9c4 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 fa88 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e03b      	b.n	8004c78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d009      	beq.n	8004c36 <HAL_TIM_Base_Start_IT+0x4e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2a:	d004      	beq.n	8004c36 <HAL_TIM_Base_Start_IT+0x4e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a15      	ldr	r2, [pc, #84]	@ (8004c88 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d115      	bne.n	8004c62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	4b13      	ldr	r3, [pc, #76]	@ (8004c8c <HAL_TIM_Base_Start_IT+0xa4>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d015      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x8c>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4e:	d011      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c60:	e008      	b.n	8004c74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e000      	b.n	8004c76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	00010007 	.word	0x00010007

08004c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0202 	mvn.w	r2, #2
 8004cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9b7 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9a9 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f9ba 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0204 	mvn.w	r2, #4
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f991 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f983 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f994 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0208 	mvn.w	r2, #8
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2204      	movs	r2, #4
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f96b 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f95d 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f96e 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f945 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f937 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f948 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0201 	mvn.w	r2, #1
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f915 	bl	8005026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 faa4 	bl	8005368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa9c 	bl	800537c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f907 	bl	8005076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0220 	mvn.w	r2, #32
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa64 	bl	8005354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0b6      	b.n	800501e <HAL_TIM_ConfigClockSource+0x18a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eec:	d03e      	beq.n	8004f6c <HAL_TIM_ConfigClockSource+0xd8>
 8004eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef2:	f200 8087 	bhi.w	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	f000 8086 	beq.w	800500a <HAL_TIM_ConfigClockSource+0x176>
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f02:	d87f      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f04:	2b70      	cmp	r3, #112	@ 0x70
 8004f06:	d01a      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0xaa>
 8004f08:	2b70      	cmp	r3, #112	@ 0x70
 8004f0a:	d87b      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f0c:	2b60      	cmp	r3, #96	@ 0x60
 8004f0e:	d050      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0x11e>
 8004f10:	2b60      	cmp	r3, #96	@ 0x60
 8004f12:	d877      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f14:	2b50      	cmp	r3, #80	@ 0x50
 8004f16:	d03c      	beq.n	8004f92 <HAL_TIM_ConfigClockSource+0xfe>
 8004f18:	2b50      	cmp	r3, #80	@ 0x50
 8004f1a:	d873      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d058      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0x13e>
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d86f      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f24:	2b30      	cmp	r3, #48	@ 0x30
 8004f26:	d064      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f28:	2b30      	cmp	r3, #48	@ 0x30
 8004f2a:	d86b      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d060      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d867      	bhi.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05c      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d05a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f3c:	e062      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	f000 f97b 	bl	8005248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	609a      	str	r2, [r3, #8]
      break;
 8004f6a:	e04f      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	f000 f964 	bl	8005248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f8e:	609a      	str	r2, [r3, #8]
      break;
 8004f90:	e03c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f000 f8d8 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2150      	movs	r1, #80	@ 0x50
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f931 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004fb0:	e02c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f000 f8f7 	bl	80051b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2160      	movs	r1, #96	@ 0x60
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f921 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004fd0:	e01c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f000 f8b8 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2140      	movs	r1, #64	@ 0x40
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f911 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004ff0:	e00c      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f000 f908 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8005002:	e003      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e000      	b.n	800500c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800500a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2a      	ldr	r2, [pc, #168]	@ (8005148 <TIM_Base_SetConfig+0xbc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x20>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d108      	bne.n	80050be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <TIM_Base_SetConfig+0xbc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <TIM_Base_SetConfig+0xc0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x52>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <TIM_Base_SetConfig+0xc4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0c      	ldr	r2, [pc, #48]	@ (8005148 <TIM_Base_SetConfig+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0xa0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0b      	ldr	r2, [pc, #44]	@ (800514c <TIM_Base_SetConfig+0xc0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0xa0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0a      	ldr	r2, [pc, #40]	@ (8005150 <TIM_Base_SetConfig+0xc4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400

08005154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 030a 	bic.w	r3, r3, #10
 8005190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 0210 	bic.w	r2, r3, #16
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	f043 0307 	orr.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e04f      	b.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a14      	ldr	r2, [pc, #80]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d009      	beq.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d004      	beq.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a10      	ldr	r2, [pc, #64]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10c      	bne.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40014000 	.word	0x40014000

08005354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e040      	b.n	8005424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd fdbe 	bl	8002f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	@ 0x24
 80053bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fade 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8af 	bl	8005540 <UART_SetConfig>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e01b      	b.n	8005424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800540a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fb5d 	bl	8005adc <UART_CheckIdleState>
 8005422:	4603      	mov	r3, r0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	@ 0x28
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005440:	2b20      	cmp	r3, #32
 8005442:	d177      	bne.n	8005534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Transmit+0x24>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e070      	b.n	8005536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2221      	movs	r2, #33	@ 0x21
 8005460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005462:	f7fd ff0b 	bl	800327c <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005480:	d108      	bne.n	8005494 <HAL_UART_Transmit+0x68>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d104      	bne.n	8005494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	e003      	b.n	800549c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800549c:	e02f      	b.n	80054fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2180      	movs	r1, #128	@ 0x80
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbbf 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e03b      	b.n	8005536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d0:	b292      	uxth	r2, r2
 80054d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	3302      	adds	r3, #2
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e007      	b.n	80054ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1c9      	bne.n	800549e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2200      	movs	r2, #0
 8005512:	2140      	movs	r1, #64	@ 0x40
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fb89 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e005      	b.n	8005536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b08a      	sub	sp, #40	@ 0x28
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	431a      	orrs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4313      	orrs	r3, r2
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4bb4      	ldr	r3, [pc, #720]	@ (8005840 <UART_SetConfig+0x300>)
 8005570:	4013      	ands	r3, r2
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005578:	430b      	orrs	r3, r1
 800557a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4aa9      	ldr	r2, [pc, #676]	@ (8005844 <UART_SetConfig+0x304>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	4313      	orrs	r3, r2
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4aa0      	ldr	r2, [pc, #640]	@ (8005848 <UART_SetConfig+0x308>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d126      	bne.n	8005618 <UART_SetConfig+0xd8>
 80055ca:	4ba0      	ldr	r3, [pc, #640]	@ (800584c <UART_SetConfig+0x30c>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d81b      	bhi.n	8005610 <UART_SetConfig+0xd0>
 80055d8:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0xa0>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005601 	.word	0x08005601
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005609 	.word	0x08005609
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f6:	e080      	b.n	80056fa <UART_SetConfig+0x1ba>
 80055f8:	2302      	movs	r3, #2
 80055fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fe:	e07c      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005606:	e078      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560e:	e074      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005616:	e070      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a8c      	ldr	r2, [pc, #560]	@ (8005850 <UART_SetConfig+0x310>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d138      	bne.n	8005694 <UART_SetConfig+0x154>
 8005622:	4b8a      	ldr	r3, [pc, #552]	@ (800584c <UART_SetConfig+0x30c>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d82d      	bhi.n	800568c <UART_SetConfig+0x14c>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0xf8>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800566d 	.word	0x0800566d
 800563c:	0800568d 	.word	0x0800568d
 8005640:	0800568d 	.word	0x0800568d
 8005644:	0800568d 	.word	0x0800568d
 8005648:	0800567d 	.word	0x0800567d
 800564c:	0800568d 	.word	0x0800568d
 8005650:	0800568d 	.word	0x0800568d
 8005654:	0800568d 	.word	0x0800568d
 8005658:	08005675 	.word	0x08005675
 800565c:	0800568d 	.word	0x0800568d
 8005660:	0800568d 	.word	0x0800568d
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005685 	.word	0x08005685
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005672:	e042      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005674:	2302      	movs	r3, #2
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567a:	e03e      	b.n	80056fa <UART_SetConfig+0x1ba>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005682:	e03a      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568a:	e036      	b.n	80056fa <UART_SetConfig+0x1ba>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005692:	e032      	b.n	80056fa <UART_SetConfig+0x1ba>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6a      	ldr	r2, [pc, #424]	@ (8005844 <UART_SetConfig+0x304>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d12a      	bne.n	80056f4 <UART_SetConfig+0x1b4>
 800569e:	4b6b      	ldr	r3, [pc, #428]	@ (800584c <UART_SetConfig+0x30c>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ac:	d01a      	beq.n	80056e4 <UART_SetConfig+0x1a4>
 80056ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056b2:	d81b      	bhi.n	80056ec <UART_SetConfig+0x1ac>
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b8:	d00c      	beq.n	80056d4 <UART_SetConfig+0x194>
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056be:	d815      	bhi.n	80056ec <UART_SetConfig+0x1ac>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <UART_SetConfig+0x18c>
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c8:	d008      	beq.n	80056dc <UART_SetConfig+0x19c>
 80056ca:	e00f      	b.n	80056ec <UART_SetConfig+0x1ac>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d2:	e012      	b.n	80056fa <UART_SetConfig+0x1ba>
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e00e      	b.n	80056fa <UART_SetConfig+0x1ba>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e00a      	b.n	80056fa <UART_SetConfig+0x1ba>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e006      	b.n	80056fa <UART_SetConfig+0x1ba>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e002      	b.n	80056fa <UART_SetConfig+0x1ba>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a51      	ldr	r2, [pc, #324]	@ (8005844 <UART_SetConfig+0x304>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d17a      	bne.n	80057fa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005708:	2b08      	cmp	r3, #8
 800570a:	d824      	bhi.n	8005756 <UART_SetConfig+0x216>
 800570c:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x1d4>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	08005757 	.word	0x08005757
 800571c:	08005741 	.word	0x08005741
 8005720:	08005757 	.word	0x08005757
 8005724:	08005747 	.word	0x08005747
 8005728:	08005757 	.word	0x08005757
 800572c:	08005757 	.word	0x08005757
 8005730:	08005757 	.word	0x08005757
 8005734:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fe7a 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e010      	b.n	8005762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b44      	ldr	r3, [pc, #272]	@ (8005854 <UART_SetConfig+0x314>)
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e00d      	b.n	8005762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fe fddb 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 800574a:	61f8      	str	r0, [r7, #28]
        break;
 800574c:	e009      	b.n	8005762 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005752:	61fb      	str	r3, [r7, #28]
        break;
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8107 	beq.w	8005978 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	4413      	add	r3, r2
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d305      	bcc.n	8005786 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	429a      	cmp	r2, r3
 8005784:	d903      	bls.n	800578e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800578c:	e0f4      	b.n	8005978 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2200      	movs	r2, #0
 8005792:	461c      	mov	r4, r3
 8005794:	4615      	mov	r5, r2
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	022b      	lsls	r3, r5, #8
 80057a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057a4:	0222      	lsls	r2, r4, #8
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	6849      	ldr	r1, [r1, #4]
 80057aa:	0849      	lsrs	r1, r1, #1
 80057ac:	2000      	movs	r0, #0
 80057ae:	4688      	mov	r8, r1
 80057b0:	4681      	mov	r9, r0
 80057b2:	eb12 0a08 	adds.w	sl, r2, r8
 80057b6:	eb43 0b09 	adc.w	fp, r3, r9
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	f7fb f9ce 	bl	8000b6c <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057de:	d308      	bcc.n	80057f2 <UART_SetConfig+0x2b2>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e6:	d204      	bcs.n	80057f2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	e0c2      	b.n	8005978 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057f8:	e0be      	b.n	8005978 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005802:	d16a      	bne.n	80058da <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005804:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005808:	2b08      	cmp	r3, #8
 800580a:	d834      	bhi.n	8005876 <UART_SetConfig+0x336>
 800580c:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <UART_SetConfig+0x2d4>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005839 	.word	0x08005839
 8005818:	08005859 	.word	0x08005859
 800581c:	08005861 	.word	0x08005861
 8005820:	08005877 	.word	0x08005877
 8005824:	08005867 	.word	0x08005867
 8005828:	08005877 	.word	0x08005877
 800582c:	08005877 	.word	0x08005877
 8005830:	08005877 	.word	0x08005877
 8005834:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fe fdfa 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 800583c:	61f8      	str	r0, [r7, #28]
        break;
 800583e:	e020      	b.n	8005882 <UART_SetConfig+0x342>
 8005840:	efff69f3 	.word	0xefff69f3
 8005844:	40008000 	.word	0x40008000
 8005848:	40013800 	.word	0x40013800
 800584c:	40021000 	.word	0x40021000
 8005850:	40004400 	.word	0x40004400
 8005854:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe fe00 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b4c      	ldr	r3, [pc, #304]	@ (8005994 <UART_SetConfig+0x454>)
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fe fd4b 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005872:	61fb      	str	r3, [r7, #28]
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d077      	beq.n	8005978 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	005a      	lsls	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	441a      	add	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b0f      	cmp	r3, #15
 80058a2:	d916      	bls.n	80058d2 <UART_SetConfig+0x392>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058aa:	d212      	bcs.n	80058d2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f023 030f 	bic.w	r3, r3, #15
 80058b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	8afb      	ldrh	r3, [r7, #22]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	8afa      	ldrh	r2, [r7, #22]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e052      	b.n	8005978 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058d8:	e04e      	b.n	8005978 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d827      	bhi.n	8005932 <UART_SetConfig+0x3f2>
 80058e2:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <UART_SetConfig+0x3a8>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005915 	.word	0x08005915
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005933 	.word	0x08005933
 80058f8:	08005923 	.word	0x08005923
 80058fc:	08005933 	.word	0x08005933
 8005900:	08005933 	.word	0x08005933
 8005904:	08005933 	.word	0x08005933
 8005908:	0800592b 	.word	0x0800592b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fe fd90 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8005910:	61f8      	str	r0, [r7, #28]
        break;
 8005912:	e014      	b.n	800593e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fda2 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8005918:	61f8      	str	r0, [r7, #28]
        break;
 800591a:	e010      	b.n	800593e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800591c:	4b1d      	ldr	r3, [pc, #116]	@ (8005994 <UART_SetConfig+0x454>)
 800591e:	61fb      	str	r3, [r7, #28]
        break;
 8005920:	e00d      	b.n	800593e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7fe fced 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8005926:	61f8      	str	r0, [r7, #28]
        break;
 8005928:	e009      	b.n	800593e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592e:	61fb      	str	r3, [r7, #28]
        break;
 8005930:	e005      	b.n	800593e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800593c:	bf00      	nop
    }

    if (pclk != 0U)
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	085a      	lsrs	r2, r3, #1
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d909      	bls.n	8005972 <UART_SetConfig+0x432>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005964:	d205      	bcs.n	8005972 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60da      	str	r2, [r3, #12]
 8005970:	e002      	b.n	8005978 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005984:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005988:	4618      	mov	r0, r3
 800598a:	3728      	adds	r7, #40	@ 0x28
 800598c:	46bd      	mov	sp, r7
 800598e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005992:	bf00      	nop
 8005994:	00f42400 	.word	0x00f42400

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b098      	sub	sp, #96	@ 0x60
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fd fbc6 	bl	800327c <HAL_GetTick>
 8005af0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d12e      	bne.n	8005b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f88c 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d021      	beq.n	8005b5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e062      	b.n	8005c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d149      	bne.n	8005c00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f856 	bl	8005c2c <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d03c      	beq.n	8005c00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	623b      	str	r3, [r7, #32]
   return(result);
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bd8:	61fa      	str	r2, [r7, #28]
 8005bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	617b      	str	r3, [r7, #20]
   return(result);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e5      	bne.n	8005bb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e011      	b.n	8005c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3758      	adds	r7, #88	@ 0x58
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3c:	e049      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c44:	d045      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fd fb19 	bl	800327c <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e048      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d031      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d110      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2208      	movs	r2, #8
 8005c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f838 	bl	8005cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e029      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cac:	d111      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f81e 	bl	8005cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e00f      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	bf0c      	ite	eq
 8005ce2:	2301      	moveq	r3, #1
 8005ce4:	2300      	movne	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d0a6      	beq.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b095      	sub	sp, #84	@ 0x54
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d118      	bne.n	8005da2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f023 0310 	bic.w	r3, r3, #16
 8005d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6979      	ldr	r1, [r7, #20]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005db6:	bf00      	nop
 8005db8:	3754      	adds	r7, #84	@ 0x54
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <_ZdlPvj>:
 8005dc2:	f000 b8c7 	b.w	8005f54 <_ZdlPv>

08005dc6 <__cxa_guard_acquire>:
 8005dc6:	6802      	ldr	r2, [r0, #0]
 8005dc8:	07d2      	lsls	r2, r2, #31
 8005dca:	4603      	mov	r3, r0
 8005dcc:	d405      	bmi.n	8005dda <__cxa_guard_acquire+0x14>
 8005dce:	7842      	ldrb	r2, [r0, #1]
 8005dd0:	b102      	cbz	r2, 8005dd4 <__cxa_guard_acquire+0xe>
 8005dd2:	deff      	udf	#255	@ 0xff
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	7058      	strb	r0, [r3, #1]
 8005dd8:	4770      	bx	lr
 8005dda:	2000      	movs	r0, #0
 8005ddc:	4770      	bx	lr

08005dde <__cxa_guard_release>:
 8005dde:	2301      	movs	r3, #1
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	4770      	bx	lr

08005de4 <_Znwj>:
 8005de4:	2801      	cmp	r0, #1
 8005de6:	bf38      	it	cc
 8005de8:	2001      	movcc	r0, #1
 8005dea:	b510      	push	{r4, lr}
 8005dec:	4604      	mov	r4, r0
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f944 	bl	800607c <malloc>
 8005df4:	b100      	cbz	r0, 8005df8 <_Znwj+0x14>
 8005df6:	bd10      	pop	{r4, pc}
 8005df8:	f000 f8ae 	bl	8005f58 <_ZSt15get_new_handlerv>
 8005dfc:	b908      	cbnz	r0, 8005e02 <_Znwj+0x1e>
 8005dfe:	f000 f92f 	bl	8006060 <abort>
 8005e02:	4780      	blx	r0
 8005e04:	e7f3      	b.n	8005dee <_Znwj+0xa>

08005e06 <_ZSt17__throw_bad_allocv>:
 8005e06:	b508      	push	{r3, lr}
 8005e08:	f000 f92a 	bl	8006060 <abort>

08005e0c <_ZSt28__throw_bad_array_new_lengthv>:
 8005e0c:	b508      	push	{r3, lr}
 8005e0e:	f000 f927 	bl	8006060 <abort>
	...

08005e14 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8005e14:	290d      	cmp	r1, #13
 8005e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e18:	4605      	mov	r5, r0
 8005e1a:	d82f      	bhi.n	8005e7c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 8005e1c:	b3b1      	cbz	r1, 8005e8c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>
 8005e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e90 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8005e20:	5c5c      	ldrb	r4, [r3, r1]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f7fa fb7e 	bl	8000524 <__aeabi_i2d>
 8005e28:	4606      	mov	r6, r0
 8005e2a:	6828      	ldr	r0, [r5, #0]
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	f7fa fb8b 	bl	8000548 <__aeabi_f2d>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fbdd 	bl	80005f8 <__aeabi_dmul>
 8005e3e:	ec41 0b10 	vmov	d0, r0, r1
 8005e42:	f000 f891 	bl	8005f68 <floor>
 8005e46:	ec51 0b10 	vmov	r0, r1, d0
 8005e4a:	f7fa fe6f 	bl	8000b2c <__aeabi_d2uiz>
 8005e4e:	6068      	str	r0, [r5, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e54:	1058      	asrs	r0, r3, #1
 8005e56:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8005e5a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8005e5e:	428e      	cmp	r6, r1
 8005e60:	d20f      	bcs.n	8005e82 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 8005e62:	1a1b      	subs	r3, r3, r0
 8005e64:	1d22      	adds	r2, r4, #4
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dcf3      	bgt.n	8005e54 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x40>
 8005e6c:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 8005e6e:	6814      	ldr	r4, [r2, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d008      	beq.n	8005e86 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7fa fb45 	bl	8000504 <__aeabi_ui2d>
 8005e7a:	e7d5      	b.n	8005e28 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8005e7c:	4a06      	ldr	r2, [pc, #24]	@ (8005e98 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 8005e7e:	23f9      	movs	r3, #249	@ 0xf9
 8005e80:	e7f2      	b.n	8005e68 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8005e82:	4603      	mov	r3, r0
 8005e84:	e7f0      	b.n	8005e68 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x54>
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e8a:	e7e0      	b.n	8005e4e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3a>
 8005e8c:	2401      	movs	r4, #1
 8005e8e:	e7df      	b.n	8005e50 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8005e90:	08006eb0 	.word	0x08006eb0
 8005e94:	080072bc 	.word	0x080072bc
 8005e98:	08006ed8 	.word	0x08006ed8

08005e9c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8005e9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	4692      	mov	sl, r2
 8005ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ea4:	eb03 0802 	add.w	r8, r3, r2
 8005ea8:	684b      	ldr	r3, [r1, #4]
 8005eaa:	4598      	cmp	r8, r3
 8005eac:	4604      	mov	r4, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	d94a      	bls.n	8005f48 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	bf0c      	ite	eq
 8005eb8:	f04f 090b 	moveq.w	r9, #11
 8005ebc:	f04f 0900 	movne.w	r9, #0
 8005ec0:	f7fa fb42 	bl	8000548 <__aeabi_f2d>
 8005ec4:	45c8      	cmp	r8, r9
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460f      	mov	r7, r1
 8005eca:	4640      	mov	r0, r8
 8005ecc:	bf38      	it	cc
 8005ece:	4648      	movcc	r0, r9
 8005ed0:	f7fa fb18 	bl	8000504 <__aeabi_ui2d>
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	f7fa fcb8 	bl	800084c <__aeabi_ddiv>
 8005edc:	e9cd 0100 	strd	r0, r1, [sp]
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	f7fa fb0f 	bl	8000504 <__aeabi_ui2d>
 8005ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eea:	4680      	mov	r8, r0
 8005eec:	4689      	mov	r9, r1
 8005eee:	f7fa fdff 	bl	8000af0 <__aeabi_dcmple>
 8005ef2:	b1d0      	cbz	r0, 8005f2a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8005ef4:	ed9d 0b00 	vldr	d0, [sp]
 8005ef8:	f000 f836 	bl	8005f68 <floor>
 8005efc:	4b14      	ldr	r3, [pc, #80]	@ (8005f50 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xb4>)
 8005efe:	ec51 0b10 	vmov	r0, r1, d0
 8005f02:	2200      	movs	r2, #0
 8005f04:	f7fa f9c2 	bl	800028c <__adddf3>
 8005f08:	f7fa fe10 	bl	8000b2c <__aeabi_d2uiz>
 8005f0c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8005f10:	4281      	cmp	r1, r0
 8005f12:	bf38      	it	cc
 8005f14:	4601      	movcc	r1, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f7ff ff7c 	bl	8005e14 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	7023      	strb	r3, [r4, #0]
 8005f20:	6060      	str	r0, [r4, #4]
 8005f22:	4620      	mov	r0, r4
 8005f24:	b002      	add	sp, #8
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa fb61 	bl	80005f8 <__aeabi_dmul>
 8005f36:	ec41 0b10 	vmov	d0, r0, r1
 8005f3a:	f000 f815 	bl	8005f68 <floor>
 8005f3e:	ec51 0b10 	vmov	r0, r1, d0
 8005f42:	f7fa fdf3 	bl	8000b2c <__aeabi_d2uiz>
 8005f46:	6068      	str	r0, [r5, #4]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e9c4 3300 	strd	r3, r3, [r4]
 8005f4e:	e7e8      	b.n	8005f22 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8005f50:	3ff00000 	.word	0x3ff00000

08005f54 <_ZdlPv>:
 8005f54:	f000 b89a 	b.w	800608c <free>

08005f58 <_ZSt15get_new_handlerv>:
 8005f58:	4b02      	ldr	r3, [pc, #8]	@ (8005f64 <_ZSt15get_new_handlerv+0xc>)
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	f3bf 8f5b 	dmb	ish
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000018c 	.word	0x2000018c

08005f68 <floor>:
 8005f68:	ec51 0b10 	vmov	r0, r1, d0
 8005f6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005f78:	2e13      	cmp	r6, #19
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	4680      	mov	r8, r0
 8005f80:	dc34      	bgt.n	8005fec <floor+0x84>
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	da17      	bge.n	8005fb6 <floor+0x4e>
 8005f86:	a332      	add	r3, pc, #200	@ (adr r3, 8006050 <floor+0xe8>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f7fa f97e 	bl	800028c <__adddf3>
 8005f90:	2200      	movs	r2, #0
 8005f92:	2300      	movs	r3, #0
 8005f94:	f7fa fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8005f98:	b150      	cbz	r0, 8005fb0 <floor+0x48>
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	da55      	bge.n	800604a <floor+0xe2>
 8005f9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005fa2:	432c      	orrs	r4, r5
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	42ac      	cmp	r4, r5
 8005fa8:	4c2b      	ldr	r4, [pc, #172]	@ (8006058 <floor+0xf0>)
 8005faa:	bf08      	it	eq
 8005fac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	e023      	b.n	8005ffe <floor+0x96>
 8005fb6:	4f29      	ldr	r7, [pc, #164]	@ (800605c <floor+0xf4>)
 8005fb8:	4137      	asrs	r7, r6
 8005fba:	ea01 0307 	and.w	r3, r1, r7
 8005fbe:	4303      	orrs	r3, r0
 8005fc0:	d01d      	beq.n	8005ffe <floor+0x96>
 8005fc2:	a323      	add	r3, pc, #140	@ (adr r3, 8006050 <floor+0xe8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa f960 	bl	800028c <__adddf3>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f7fa fda2 	bl	8000b18 <__aeabi_dcmpgt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d0eb      	beq.n	8005fb0 <floor+0x48>
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	bfbe      	ittt	lt
 8005fdc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005fe0:	4133      	asrlt	r3, r6
 8005fe2:	18e4      	addlt	r4, r4, r3
 8005fe4:	ea24 0407 	bic.w	r4, r4, r7
 8005fe8:	2500      	movs	r5, #0
 8005fea:	e7e1      	b.n	8005fb0 <floor+0x48>
 8005fec:	2e33      	cmp	r6, #51	@ 0x33
 8005fee:	dd0a      	ble.n	8006006 <floor+0x9e>
 8005ff0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005ff4:	d103      	bne.n	8005ffe <floor+0x96>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	f7fa f947 	bl	800028c <__adddf3>
 8005ffe:	ec41 0b10 	vmov	d0, r0, r1
 8006002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006006:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800600a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800600e:	40df      	lsrs	r7, r3
 8006010:	4207      	tst	r7, r0
 8006012:	d0f4      	beq.n	8005ffe <floor+0x96>
 8006014:	a30e      	add	r3, pc, #56	@ (adr r3, 8006050 <floor+0xe8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f937 	bl	800028c <__adddf3>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	f7fa fd79 	bl	8000b18 <__aeabi_dcmpgt>
 8006026:	2800      	cmp	r0, #0
 8006028:	d0c2      	beq.n	8005fb0 <floor+0x48>
 800602a:	2c00      	cmp	r4, #0
 800602c:	da0a      	bge.n	8006044 <floor+0xdc>
 800602e:	2e14      	cmp	r6, #20
 8006030:	d101      	bne.n	8006036 <floor+0xce>
 8006032:	3401      	adds	r4, #1
 8006034:	e006      	b.n	8006044 <floor+0xdc>
 8006036:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800603a:	2301      	movs	r3, #1
 800603c:	40b3      	lsls	r3, r6
 800603e:	441d      	add	r5, r3
 8006040:	4545      	cmp	r5, r8
 8006042:	d3f6      	bcc.n	8006032 <floor+0xca>
 8006044:	ea25 0507 	bic.w	r5, r5, r7
 8006048:	e7b2      	b.n	8005fb0 <floor+0x48>
 800604a:	2500      	movs	r5, #0
 800604c:	462c      	mov	r4, r5
 800604e:	e7af      	b.n	8005fb0 <floor+0x48>
 8006050:	8800759c 	.word	0x8800759c
 8006054:	7e37e43c 	.word	0x7e37e43c
 8006058:	bff00000 	.word	0xbff00000
 800605c:	000fffff 	.word	0x000fffff

08006060 <abort>:
 8006060:	b508      	push	{r3, lr}
 8006062:	2006      	movs	r0, #6
 8006064:	f000 f93c 	bl	80062e0 <raise>
 8006068:	2001      	movs	r0, #1
 800606a:	f7fd f821 	bl	80030b0 <_exit>

0800606e <atexit>:
 800606e:	2300      	movs	r3, #0
 8006070:	4601      	mov	r1, r0
 8006072:	461a      	mov	r2, r3
 8006074:	4618      	mov	r0, r3
 8006076:	f000 b98b 	b.w	8006390 <__register_exitproc>
	...

0800607c <malloc>:
 800607c:	4b02      	ldr	r3, [pc, #8]	@ (8006088 <malloc+0xc>)
 800607e:	4601      	mov	r1, r0
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f000 b82d 	b.w	80060e0 <_malloc_r>
 8006086:	bf00      	nop
 8006088:	2000000c 	.word	0x2000000c

0800608c <free>:
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <free+0xc>)
 800608e:	4601      	mov	r1, r0
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f000 b9d9 	b.w	8006448 <_free_r>
 8006096:	bf00      	nop
 8006098:	2000000c 	.word	0x2000000c

0800609c <sbrk_aligned>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4e0f      	ldr	r6, [pc, #60]	@ (80060dc <sbrk_aligned+0x40>)
 80060a0:	460c      	mov	r4, r1
 80060a2:	6831      	ldr	r1, [r6, #0]
 80060a4:	4605      	mov	r5, r0
 80060a6:	b911      	cbnz	r1, 80060ae <sbrk_aligned+0x12>
 80060a8:	f000 f936 	bl	8006318 <_sbrk_r>
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 f931 	bl	8006318 <_sbrk_r>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d103      	bne.n	80060c2 <sbrk_aligned+0x26>
 80060ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80060be:	4620      	mov	r0, r4
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
 80060c2:	1cc4      	adds	r4, r0, #3
 80060c4:	f024 0403 	bic.w	r4, r4, #3
 80060c8:	42a0      	cmp	r0, r4
 80060ca:	d0f8      	beq.n	80060be <sbrk_aligned+0x22>
 80060cc:	1a21      	subs	r1, r4, r0
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 f922 	bl	8006318 <_sbrk_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1f2      	bne.n	80060be <sbrk_aligned+0x22>
 80060d8:	e7ef      	b.n	80060ba <sbrk_aligned+0x1e>
 80060da:	bf00      	nop
 80060dc:	20000190 	.word	0x20000190

080060e0 <_malloc_r>:
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	1ccd      	adds	r5, r1, #3
 80060e6:	f025 0503 	bic.w	r5, r5, #3
 80060ea:	3508      	adds	r5, #8
 80060ec:	2d0c      	cmp	r5, #12
 80060ee:	bf38      	it	cc
 80060f0:	250c      	movcc	r5, #12
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	4606      	mov	r6, r0
 80060f6:	db01      	blt.n	80060fc <_malloc_r+0x1c>
 80060f8:	42a9      	cmp	r1, r5
 80060fa:	d904      	bls.n	8006106 <_malloc_r+0x26>
 80060fc:	230c      	movs	r3, #12
 80060fe:	6033      	str	r3, [r6, #0]
 8006100:	2000      	movs	r0, #0
 8006102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061dc <_malloc_r+0xfc>
 800610a:	f000 f869 	bl	80061e0 <__malloc_lock>
 800610e:	f8d8 3000 	ldr.w	r3, [r8]
 8006112:	461c      	mov	r4, r3
 8006114:	bb44      	cbnz	r4, 8006168 <_malloc_r+0x88>
 8006116:	4629      	mov	r1, r5
 8006118:	4630      	mov	r0, r6
 800611a:	f7ff ffbf 	bl	800609c <sbrk_aligned>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	4604      	mov	r4, r0
 8006122:	d158      	bne.n	80061d6 <_malloc_r+0xf6>
 8006124:	f8d8 4000 	ldr.w	r4, [r8]
 8006128:	4627      	mov	r7, r4
 800612a:	2f00      	cmp	r7, #0
 800612c:	d143      	bne.n	80061b6 <_malloc_r+0xd6>
 800612e:	2c00      	cmp	r4, #0
 8006130:	d04b      	beq.n	80061ca <_malloc_r+0xea>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	4639      	mov	r1, r7
 8006136:	4630      	mov	r0, r6
 8006138:	eb04 0903 	add.w	r9, r4, r3
 800613c:	f000 f8ec 	bl	8006318 <_sbrk_r>
 8006140:	4581      	cmp	r9, r0
 8006142:	d142      	bne.n	80061ca <_malloc_r+0xea>
 8006144:	6821      	ldr	r1, [r4, #0]
 8006146:	1a6d      	subs	r5, r5, r1
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffa6 	bl	800609c <sbrk_aligned>
 8006150:	3001      	adds	r0, #1
 8006152:	d03a      	beq.n	80061ca <_malloc_r+0xea>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	442b      	add	r3, r5
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	f8d8 3000 	ldr.w	r3, [r8]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	bb62      	cbnz	r2, 80061bc <_malloc_r+0xdc>
 8006162:	f8c8 7000 	str.w	r7, [r8]
 8006166:	e00f      	b.n	8006188 <_malloc_r+0xa8>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	1b52      	subs	r2, r2, r5
 800616c:	d420      	bmi.n	80061b0 <_malloc_r+0xd0>
 800616e:	2a0b      	cmp	r2, #11
 8006170:	d917      	bls.n	80061a2 <_malloc_r+0xc2>
 8006172:	1961      	adds	r1, r4, r5
 8006174:	42a3      	cmp	r3, r4
 8006176:	6025      	str	r5, [r4, #0]
 8006178:	bf18      	it	ne
 800617a:	6059      	strne	r1, [r3, #4]
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	bf08      	it	eq
 8006180:	f8c8 1000 	streq.w	r1, [r8]
 8006184:	5162      	str	r2, [r4, r5]
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f82f 	bl	80061ec <__malloc_unlock>
 800618e:	f104 000b 	add.w	r0, r4, #11
 8006192:	1d23      	adds	r3, r4, #4
 8006194:	f020 0007 	bic.w	r0, r0, #7
 8006198:	1ac2      	subs	r2, r0, r3
 800619a:	bf1c      	itt	ne
 800619c:	1a1b      	subne	r3, r3, r0
 800619e:	50a3      	strne	r3, [r4, r2]
 80061a0:	e7af      	b.n	8006102 <_malloc_r+0x22>
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	bf0c      	ite	eq
 80061a8:	f8c8 2000 	streq.w	r2, [r8]
 80061ac:	605a      	strne	r2, [r3, #4]
 80061ae:	e7eb      	b.n	8006188 <_malloc_r+0xa8>
 80061b0:	4623      	mov	r3, r4
 80061b2:	6864      	ldr	r4, [r4, #4]
 80061b4:	e7ae      	b.n	8006114 <_malloc_r+0x34>
 80061b6:	463c      	mov	r4, r7
 80061b8:	687f      	ldr	r7, [r7, #4]
 80061ba:	e7b6      	b.n	800612a <_malloc_r+0x4a>
 80061bc:	461a      	mov	r2, r3
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d1fb      	bne.n	80061bc <_malloc_r+0xdc>
 80061c4:	2300      	movs	r3, #0
 80061c6:	6053      	str	r3, [r2, #4]
 80061c8:	e7de      	b.n	8006188 <_malloc_r+0xa8>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 f80c 	bl	80061ec <__malloc_unlock>
 80061d4:	e794      	b.n	8006100 <_malloc_r+0x20>
 80061d6:	6005      	str	r5, [r0, #0]
 80061d8:	e7d6      	b.n	8006188 <_malloc_r+0xa8>
 80061da:	bf00      	nop
 80061dc:	20000194 	.word	0x20000194

080061e0 <__malloc_lock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	@ (80061e8 <__malloc_lock+0x8>)
 80061e2:	f000 b8d3 	b.w	800638c <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	200002d4 	.word	0x200002d4

080061ec <__malloc_unlock>:
 80061ec:	4801      	ldr	r0, [pc, #4]	@ (80061f4 <__malloc_unlock+0x8>)
 80061ee:	f000 b8ce 	b.w	800638e <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	200002d4 	.word	0x200002d4

080061f8 <mallinfo>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <mallinfo+0x10>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	f000 f96c 	bl	80064dc <_mallinfo_r>
 8006204:	4620      	mov	r0, r4
 8006206:	bd10      	pop	{r4, pc}
 8006208:	2000000c 	.word	0x2000000c

0800620c <_vsniprintf_r>:
 800620c:	b530      	push	{r4, r5, lr}
 800620e:	4614      	mov	r4, r2
 8006210:	2c00      	cmp	r4, #0
 8006212:	b09b      	sub	sp, #108	@ 0x6c
 8006214:	4605      	mov	r5, r0
 8006216:	461a      	mov	r2, r3
 8006218:	da05      	bge.n	8006226 <_vsniprintf_r+0x1a>
 800621a:	238b      	movs	r3, #139	@ 0x8b
 800621c:	6003      	str	r3, [r0, #0]
 800621e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006222:	b01b      	add	sp, #108	@ 0x6c
 8006224:	bd30      	pop	{r4, r5, pc}
 8006226:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800622a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800622e:	bf14      	ite	ne
 8006230:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006234:	4623      	moveq	r3, r4
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	9305      	str	r3, [sp, #20]
 800623a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800623e:	9100      	str	r1, [sp, #0]
 8006240:	9104      	str	r1, [sp, #16]
 8006242:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006246:	4669      	mov	r1, sp
 8006248:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800624a:	f000 f9d7 	bl	80065fc <_svfiprintf_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	bfbc      	itt	lt
 8006252:	238b      	movlt	r3, #139	@ 0x8b
 8006254:	602b      	strlt	r3, [r5, #0]
 8006256:	2c00      	cmp	r4, #0
 8006258:	d0e3      	beq.n	8006222 <_vsniprintf_r+0x16>
 800625a:	9b00      	ldr	r3, [sp, #0]
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e7df      	b.n	8006222 <_vsniprintf_r+0x16>
	...

08006264 <vsniprintf>:
 8006264:	b507      	push	{r0, r1, r2, lr}
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	460a      	mov	r2, r1
 800626c:	4601      	mov	r1, r0
 800626e:	4803      	ldr	r0, [pc, #12]	@ (800627c <vsniprintf+0x18>)
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f7ff ffcb 	bl	800620c <_vsniprintf_r>
 8006276:	b003      	add	sp, #12
 8006278:	f85d fb04 	ldr.w	pc, [sp], #4
 800627c:	2000000c 	.word	0x2000000c

08006280 <memset>:
 8006280:	4402      	add	r2, r0
 8006282:	4603      	mov	r3, r0
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	f803 1b01 	strb.w	r1, [r3], #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <_raise_r>:
 8006290:	291f      	cmp	r1, #31
 8006292:	b538      	push	{r3, r4, r5, lr}
 8006294:	4605      	mov	r5, r0
 8006296:	460c      	mov	r4, r1
 8006298:	d904      	bls.n	80062a4 <_raise_r+0x14>
 800629a:	2316      	movs	r3, #22
 800629c:	6003      	str	r3, [r0, #0]
 800629e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062a6:	b112      	cbz	r2, 80062ae <_raise_r+0x1e>
 80062a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062ac:	b94b      	cbnz	r3, 80062c2 <_raise_r+0x32>
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f830 	bl	8006314 <_getpid_r>
 80062b4:	4622      	mov	r2, r4
 80062b6:	4601      	mov	r1, r0
 80062b8:	4628      	mov	r0, r5
 80062ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062be:	f000 b817 	b.w	80062f0 <_kill_r>
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d00a      	beq.n	80062dc <_raise_r+0x4c>
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	d103      	bne.n	80062d2 <_raise_r+0x42>
 80062ca:	2316      	movs	r3, #22
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	2001      	movs	r0, #1
 80062d0:	e7e7      	b.n	80062a2 <_raise_r+0x12>
 80062d2:	2100      	movs	r1, #0
 80062d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062d8:	4620      	mov	r0, r4
 80062da:	4798      	blx	r3
 80062dc:	2000      	movs	r0, #0
 80062de:	e7e0      	b.n	80062a2 <_raise_r+0x12>

080062e0 <raise>:
 80062e0:	4b02      	ldr	r3, [pc, #8]	@ (80062ec <raise+0xc>)
 80062e2:	4601      	mov	r1, r0
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	f7ff bfd3 	b.w	8006290 <_raise_r>
 80062ea:	bf00      	nop
 80062ec:	2000000c 	.word	0x2000000c

080062f0 <_kill_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	@ (8006310 <_kill_r+0x20>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	f7fc fec7 	bl	8003090 <_kill>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d102      	bne.n	800630c <_kill_r+0x1c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	b103      	cbz	r3, 800630c <_kill_r+0x1c>
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	200002d0 	.word	0x200002d0

08006314 <_getpid_r>:
 8006314:	f7fc beb4 	b.w	8003080 <_getpid>

08006318 <_sbrk_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d06      	ldr	r5, [pc, #24]	@ (8006334 <_sbrk_r+0x1c>)
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	f7fc fed0 	bl	80030c8 <_sbrk>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_sbrk_r+0x1a>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_sbrk_r+0x1a>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200002d0 	.word	0x200002d0

08006338 <__errno>:
 8006338:	4b01      	ldr	r3, [pc, #4]	@ (8006340 <__errno+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	2000000c 	.word	0x2000000c

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	@ (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	@ (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	@ (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	@ (8006388 <__libc_init_array+0x44>)
 8006358:	f000 fc38 	bl	8006bcc <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	08007300 	.word	0x08007300
 8006380:	08007300 	.word	0x08007300
 8006384:	08007300 	.word	0x08007300
 8006388:	08007304 	.word	0x08007304

0800638c <__retarget_lock_acquire_recursive>:
 800638c:	4770      	bx	lr

0800638e <__retarget_lock_release_recursive>:
 800638e:	4770      	bx	lr

08006390 <__register_exitproc>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	4d27      	ldr	r5, [pc, #156]	@ (8006434 <__register_exitproc+0xa4>)
 8006396:	4607      	mov	r7, r0
 8006398:	6828      	ldr	r0, [r5, #0]
 800639a:	4691      	mov	r9, r2
 800639c:	460e      	mov	r6, r1
 800639e:	4698      	mov	r8, r3
 80063a0:	f7ff fff4 	bl	800638c <__retarget_lock_acquire_recursive>
 80063a4:	4a24      	ldr	r2, [pc, #144]	@ (8006438 <__register_exitproc+0xa8>)
 80063a6:	6814      	ldr	r4, [r2, #0]
 80063a8:	b93c      	cbnz	r4, 80063ba <__register_exitproc+0x2a>
 80063aa:	4b24      	ldr	r3, [pc, #144]	@ (800643c <__register_exitproc+0xac>)
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <__register_exitproc+0xb0>)
 80063b0:	b112      	cbz	r2, 80063b8 <__register_exitproc+0x28>
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80063b8:	4c20      	ldr	r4, [pc, #128]	@ (800643c <__register_exitproc+0xac>)
 80063ba:	6863      	ldr	r3, [r4, #4]
 80063bc:	2b1f      	cmp	r3, #31
 80063be:	dd06      	ble.n	80063ce <__register_exitproc+0x3e>
 80063c0:	6828      	ldr	r0, [r5, #0]
 80063c2:	f7ff ffe4 	bl	800638e <__retarget_lock_release_recursive>
 80063c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ce:	b32f      	cbz	r7, 800641c <__register_exitproc+0x8c>
 80063d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80063d4:	b968      	cbnz	r0, 80063f2 <__register_exitproc+0x62>
 80063d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <__register_exitproc+0xb4>)
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f1      	beq.n	80063c0 <__register_exitproc+0x30>
 80063dc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80063e0:	f7ff fe4c 	bl	800607c <malloc>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d0eb      	beq.n	80063c0 <__register_exitproc+0x30>
 80063e8:	2300      	movs	r3, #0
 80063ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80063ee:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80063f8:	2201      	movs	r2, #1
 80063fa:	409a      	lsls	r2, r3
 80063fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8006400:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800640a:	2f02      	cmp	r7, #2
 800640c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8006410:	bf02      	ittt	eq
 8006412:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8006416:	4313      	orreq	r3, r2
 8006418:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	6828      	ldr	r0, [r5, #0]
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	3302      	adds	r3, #2
 8006424:	6062      	str	r2, [r4, #4]
 8006426:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800642a:	f7ff ffb0 	bl	800638e <__retarget_lock_release_recursive>
 800642e:	2000      	movs	r0, #0
 8006430:	e7cb      	b.n	80063ca <__register_exitproc+0x3a>
 8006432:	bf00      	nop
 8006434:	2000005c 	.word	0x2000005c
 8006438:	20000364 	.word	0x20000364
 800643c:	200002d8 	.word	0x200002d8
 8006440:	00000000 	.word	0x00000000
 8006444:	0800607d 	.word	0x0800607d

08006448 <_free_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4605      	mov	r5, r0
 800644c:	2900      	cmp	r1, #0
 800644e:	d041      	beq.n	80064d4 <_free_r+0x8c>
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f0c      	subs	r4, r1, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfb8      	it	lt
 800645a:	18e4      	addlt	r4, r4, r3
 800645c:	f7ff fec0 	bl	80061e0 <__malloc_lock>
 8006460:	4a1d      	ldr	r2, [pc, #116]	@ (80064d8 <_free_r+0x90>)
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x2c>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	4628      	mov	r0, r5
 800646c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006470:	f7ff bebc 	b.w	80061ec <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x42>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	1821      	adds	r1, r4, r0
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1809      	addeq	r1, r1, r0
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x1e>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x4c>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x42>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1850      	adds	r0, r2, r1
 8006498:	42a0      	cmp	r0, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x6c>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	4401      	add	r1, r0
 80064a0:	1850      	adds	r0, r2, r1
 80064a2:	4283      	cmp	r3, r0
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x22>
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	4408      	add	r0, r1
 80064b0:	6010      	str	r0, [r2, #0]
 80064b2:	e7da      	b.n	800646a <_free_r+0x22>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x74>
 80064b6:	230c      	movs	r3, #12
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x22>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	1821      	adds	r1, r4, r0
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf04      	itt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	bf04      	itt	eq
 80064cc:	1809      	addeq	r1, r1, r0
 80064ce:	6021      	streq	r1, [r4, #0]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7ca      	b.n	800646a <_free_r+0x22>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	bf00      	nop
 80064d8:	20000194 	.word	0x20000194

080064dc <_mallinfo_r>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4c16      	ldr	r4, [pc, #88]	@ (8006538 <_mallinfo_r+0x5c>)
 80064e0:	4605      	mov	r5, r0
 80064e2:	4608      	mov	r0, r1
 80064e4:	460e      	mov	r6, r1
 80064e6:	f7ff fe7b 	bl	80061e0 <__malloc_lock>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	b14b      	cbz	r3, 8006502 <_mallinfo_r+0x26>
 80064ee:	2100      	movs	r1, #0
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff ff11 	bl	8006318 <_sbrk_r>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	bf18      	it	ne
 80064fa:	6822      	ldrne	r2, [r4, #0]
 80064fc:	4603      	mov	r3, r0
 80064fe:	bf18      	it	ne
 8006500:	1a83      	subne	r3, r0, r2
 8006502:	4a0e      	ldr	r2, [pc, #56]	@ (800653c <_mallinfo_r+0x60>)
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	b991      	cbnz	r1, 8006530 <_mallinfo_r+0x54>
 800650a:	4c0d      	ldr	r4, [pc, #52]	@ (8006540 <_mallinfo_r+0x64>)
 800650c:	4630      	mov	r0, r6
 800650e:	6023      	str	r3, [r4, #0]
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	6222      	str	r2, [r4, #32]
 8006514:	61e3      	str	r3, [r4, #28]
 8006516:	f7ff fe69 	bl	80061ec <__malloc_unlock>
 800651a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800651c:	462e      	mov	r6, r5
 800651e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006522:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006528:	e886 0003 	stmia.w	r6, {r0, r1}
 800652c:	4628      	mov	r0, r5
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	6849      	ldr	r1, [r1, #4]
 8006534:	4402      	add	r2, r0
 8006536:	e7e7      	b.n	8006508 <_mallinfo_r+0x2c>
 8006538:	20000190 	.word	0x20000190
 800653c:	20000194 	.word	0x20000194
 8006540:	20000368 	.word	0x20000368

08006544 <__ssputs_r>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	688e      	ldr	r6, [r1, #8]
 800654a:	461f      	mov	r7, r3
 800654c:	42be      	cmp	r6, r7
 800654e:	680b      	ldr	r3, [r1, #0]
 8006550:	4682      	mov	sl, r0
 8006552:	460c      	mov	r4, r1
 8006554:	4690      	mov	r8, r2
 8006556:	d82d      	bhi.n	80065b4 <__ssputs_r+0x70>
 8006558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800655c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006560:	d026      	beq.n	80065b0 <__ssputs_r+0x6c>
 8006562:	6965      	ldr	r5, [r4, #20]
 8006564:	6909      	ldr	r1, [r1, #16]
 8006566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800656a:	eba3 0901 	sub.w	r9, r3, r1
 800656e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006572:	1c7b      	adds	r3, r7, #1
 8006574:	444b      	add	r3, r9
 8006576:	106d      	asrs	r5, r5, #1
 8006578:	429d      	cmp	r5, r3
 800657a:	bf38      	it	cc
 800657c:	461d      	movcc	r5, r3
 800657e:	0553      	lsls	r3, r2, #21
 8006580:	d527      	bpl.n	80065d2 <__ssputs_r+0x8e>
 8006582:	4629      	mov	r1, r5
 8006584:	f7ff fdac 	bl	80060e0 <_malloc_r>
 8006588:	4606      	mov	r6, r0
 800658a:	b360      	cbz	r0, 80065e6 <__ssputs_r+0xa2>
 800658c:	6921      	ldr	r1, [r4, #16]
 800658e:	464a      	mov	r2, r9
 8006590:	f000 fad8 	bl	8006b44 <memcpy>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800659a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	6126      	str	r6, [r4, #16]
 80065a2:	6165      	str	r5, [r4, #20]
 80065a4:	444e      	add	r6, r9
 80065a6:	eba5 0509 	sub.w	r5, r5, r9
 80065aa:	6026      	str	r6, [r4, #0]
 80065ac:	60a5      	str	r5, [r4, #8]
 80065ae:	463e      	mov	r6, r7
 80065b0:	42be      	cmp	r6, r7
 80065b2:	d900      	bls.n	80065b6 <__ssputs_r+0x72>
 80065b4:	463e      	mov	r6, r7
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4641      	mov	r1, r8
 80065bc:	f000 faa8 	bl	8006b10 <memmove>
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	1b9b      	subs	r3, r3, r6
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	4433      	add	r3, r6
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	2000      	movs	r0, #0
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	462a      	mov	r2, r5
 80065d4:	f000 fac4 	bl	8006b60 <_realloc_r>
 80065d8:	4606      	mov	r6, r0
 80065da:	2800      	cmp	r0, #0
 80065dc:	d1e0      	bne.n	80065a0 <__ssputs_r+0x5c>
 80065de:	6921      	ldr	r1, [r4, #16]
 80065e0:	4650      	mov	r0, sl
 80065e2:	f7ff ff31 	bl	8006448 <_free_r>
 80065e6:	230c      	movs	r3, #12
 80065e8:	f8ca 3000 	str.w	r3, [sl]
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f8:	e7e9      	b.n	80065ce <__ssputs_r+0x8a>
	...

080065fc <_svfiprintf_r>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4698      	mov	r8, r3
 8006602:	898b      	ldrh	r3, [r1, #12]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	b09d      	sub	sp, #116	@ 0x74
 8006608:	4607      	mov	r7, r0
 800660a:	460d      	mov	r5, r1
 800660c:	4614      	mov	r4, r2
 800660e:	d510      	bpl.n	8006632 <_svfiprintf_r+0x36>
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	b973      	cbnz	r3, 8006632 <_svfiprintf_r+0x36>
 8006614:	2140      	movs	r1, #64	@ 0x40
 8006616:	f7ff fd63 	bl	80060e0 <_malloc_r>
 800661a:	6028      	str	r0, [r5, #0]
 800661c:	6128      	str	r0, [r5, #16]
 800661e:	b930      	cbnz	r0, 800662e <_svfiprintf_r+0x32>
 8006620:	230c      	movs	r3, #12
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006628:	b01d      	add	sp, #116	@ 0x74
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	2340      	movs	r3, #64	@ 0x40
 8006630:	616b      	str	r3, [r5, #20]
 8006632:	2300      	movs	r3, #0
 8006634:	9309      	str	r3, [sp, #36]	@ 0x24
 8006636:	2320      	movs	r3, #32
 8006638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800663c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006640:	2330      	movs	r3, #48	@ 0x30
 8006642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067e0 <_svfiprintf_r+0x1e4>
 8006646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800664a:	f04f 0901 	mov.w	r9, #1
 800664e:	4623      	mov	r3, r4
 8006650:	469a      	mov	sl, r3
 8006652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006656:	b10a      	cbz	r2, 800665c <_svfiprintf_r+0x60>
 8006658:	2a25      	cmp	r2, #37	@ 0x25
 800665a:	d1f9      	bne.n	8006650 <_svfiprintf_r+0x54>
 800665c:	ebba 0b04 	subs.w	fp, sl, r4
 8006660:	d00b      	beq.n	800667a <_svfiprintf_r+0x7e>
 8006662:	465b      	mov	r3, fp
 8006664:	4622      	mov	r2, r4
 8006666:	4629      	mov	r1, r5
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff ff6b 	bl	8006544 <__ssputs_r>
 800666e:	3001      	adds	r0, #1
 8006670:	f000 80a7 	beq.w	80067c2 <_svfiprintf_r+0x1c6>
 8006674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006676:	445a      	add	r2, fp
 8006678:	9209      	str	r2, [sp, #36]	@ 0x24
 800667a:	f89a 3000 	ldrb.w	r3, [sl]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 809f 	beq.w	80067c2 <_svfiprintf_r+0x1c6>
 8006684:	2300      	movs	r3, #0
 8006686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800668a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800668e:	f10a 0a01 	add.w	sl, sl, #1
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	9307      	str	r3, [sp, #28]
 8006696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800669a:	931a      	str	r3, [sp, #104]	@ 0x68
 800669c:	4654      	mov	r4, sl
 800669e:	2205      	movs	r2, #5
 80066a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a4:	484e      	ldr	r0, [pc, #312]	@ (80067e0 <_svfiprintf_r+0x1e4>)
 80066a6:	f7f9 fd9b 	bl	80001e0 <memchr>
 80066aa:	9a04      	ldr	r2, [sp, #16]
 80066ac:	b9d8      	cbnz	r0, 80066e6 <_svfiprintf_r+0xea>
 80066ae:	06d0      	lsls	r0, r2, #27
 80066b0:	bf44      	itt	mi
 80066b2:	2320      	movmi	r3, #32
 80066b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b8:	0711      	lsls	r1, r2, #28
 80066ba:	bf44      	itt	mi
 80066bc:	232b      	movmi	r3, #43	@ 0x2b
 80066be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c2:	f89a 3000 	ldrb.w	r3, [sl]
 80066c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c8:	d015      	beq.n	80066f6 <_svfiprintf_r+0xfa>
 80066ca:	9a07      	ldr	r2, [sp, #28]
 80066cc:	4654      	mov	r4, sl
 80066ce:	2000      	movs	r0, #0
 80066d0:	f04f 0c0a 	mov.w	ip, #10
 80066d4:	4621      	mov	r1, r4
 80066d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066da:	3b30      	subs	r3, #48	@ 0x30
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d94b      	bls.n	8006778 <_svfiprintf_r+0x17c>
 80066e0:	b1b0      	cbz	r0, 8006710 <_svfiprintf_r+0x114>
 80066e2:	9207      	str	r2, [sp, #28]
 80066e4:	e014      	b.n	8006710 <_svfiprintf_r+0x114>
 80066e6:	eba0 0308 	sub.w	r3, r0, r8
 80066ea:	fa09 f303 	lsl.w	r3, r9, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	46a2      	mov	sl, r4
 80066f4:	e7d2      	b.n	800669c <_svfiprintf_r+0xa0>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	1d19      	adds	r1, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9103      	str	r1, [sp, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfbb      	ittet	lt
 8006702:	425b      	neglt	r3, r3
 8006704:	f042 0202 	orrlt.w	r2, r2, #2
 8006708:	9307      	strge	r3, [sp, #28]
 800670a:	9307      	strlt	r3, [sp, #28]
 800670c:	bfb8      	it	lt
 800670e:	9204      	strlt	r2, [sp, #16]
 8006710:	7823      	ldrb	r3, [r4, #0]
 8006712:	2b2e      	cmp	r3, #46	@ 0x2e
 8006714:	d10a      	bne.n	800672c <_svfiprintf_r+0x130>
 8006716:	7863      	ldrb	r3, [r4, #1]
 8006718:	2b2a      	cmp	r3, #42	@ 0x2a
 800671a:	d132      	bne.n	8006782 <_svfiprintf_r+0x186>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	1d1a      	adds	r2, r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	9203      	str	r2, [sp, #12]
 8006724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006728:	3402      	adds	r4, #2
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067f0 <_svfiprintf_r+0x1f4>
 8006730:	7821      	ldrb	r1, [r4, #0]
 8006732:	2203      	movs	r2, #3
 8006734:	4650      	mov	r0, sl
 8006736:	f7f9 fd53 	bl	80001e0 <memchr>
 800673a:	b138      	cbz	r0, 800674c <_svfiprintf_r+0x150>
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	eba0 000a 	sub.w	r0, r0, sl
 8006742:	2240      	movs	r2, #64	@ 0x40
 8006744:	4082      	lsls	r2, r0
 8006746:	4313      	orrs	r3, r2
 8006748:	3401      	adds	r4, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006750:	4824      	ldr	r0, [pc, #144]	@ (80067e4 <_svfiprintf_r+0x1e8>)
 8006752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006756:	2206      	movs	r2, #6
 8006758:	f7f9 fd42 	bl	80001e0 <memchr>
 800675c:	2800      	cmp	r0, #0
 800675e:	d036      	beq.n	80067ce <_svfiprintf_r+0x1d2>
 8006760:	4b21      	ldr	r3, [pc, #132]	@ (80067e8 <_svfiprintf_r+0x1ec>)
 8006762:	bb1b      	cbnz	r3, 80067ac <_svfiprintf_r+0x1b0>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	3307      	adds	r3, #7
 8006768:	f023 0307 	bic.w	r3, r3, #7
 800676c:	3308      	adds	r3, #8
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006772:	4433      	add	r3, r6
 8006774:	9309      	str	r3, [sp, #36]	@ 0x24
 8006776:	e76a      	b.n	800664e <_svfiprintf_r+0x52>
 8006778:	fb0c 3202 	mla	r2, ip, r2, r3
 800677c:	460c      	mov	r4, r1
 800677e:	2001      	movs	r0, #1
 8006780:	e7a8      	b.n	80066d4 <_svfiprintf_r+0xd8>
 8006782:	2300      	movs	r3, #0
 8006784:	3401      	adds	r4, #1
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	4619      	mov	r1, r3
 800678a:	f04f 0c0a 	mov.w	ip, #10
 800678e:	4620      	mov	r0, r4
 8006790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006794:	3a30      	subs	r2, #48	@ 0x30
 8006796:	2a09      	cmp	r2, #9
 8006798:	d903      	bls.n	80067a2 <_svfiprintf_r+0x1a6>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0c6      	beq.n	800672c <_svfiprintf_r+0x130>
 800679e:	9105      	str	r1, [sp, #20]
 80067a0:	e7c4      	b.n	800672c <_svfiprintf_r+0x130>
 80067a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a6:	4604      	mov	r4, r0
 80067a8:	2301      	movs	r3, #1
 80067aa:	e7f0      	b.n	800678e <_svfiprintf_r+0x192>
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4b0e      	ldr	r3, [pc, #56]	@ (80067ec <_svfiprintf_r+0x1f0>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4638      	mov	r0, r7
 80067b8:	f3af 8000 	nop.w
 80067bc:	1c42      	adds	r2, r0, #1
 80067be:	4606      	mov	r6, r0
 80067c0:	d1d6      	bne.n	8006770 <_svfiprintf_r+0x174>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	065b      	lsls	r3, r3, #25
 80067c6:	f53f af2d 	bmi.w	8006624 <_svfiprintf_r+0x28>
 80067ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067cc:	e72c      	b.n	8006628 <_svfiprintf_r+0x2c>
 80067ce:	ab03      	add	r3, sp, #12
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	462a      	mov	r2, r5
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <_svfiprintf_r+0x1f0>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	4638      	mov	r0, r7
 80067da:	f000 f879 	bl	80068d0 <_printf_i>
 80067de:	e7ed      	b.n	80067bc <_svfiprintf_r+0x1c0>
 80067e0:	080072c4 	.word	0x080072c4
 80067e4:	080072ce 	.word	0x080072ce
 80067e8:	00000000 	.word	0x00000000
 80067ec:	08006545 	.word	0x08006545
 80067f0:	080072ca 	.word	0x080072ca

080067f4 <_printf_common>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	4616      	mov	r6, r2
 80067fa:	4698      	mov	r8, r3
 80067fc:	688a      	ldr	r2, [r1, #8]
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006804:	4293      	cmp	r3, r2
 8006806:	bfb8      	it	lt
 8006808:	4613      	movlt	r3, r2
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006810:	4607      	mov	r7, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b10a      	cbz	r2, 800681a <_printf_common+0x26>
 8006816:	3301      	adds	r3, #1
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	0699      	lsls	r1, r3, #26
 800681e:	bf42      	ittt	mi
 8006820:	6833      	ldrmi	r3, [r6, #0]
 8006822:	3302      	addmi	r3, #2
 8006824:	6033      	strmi	r3, [r6, #0]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	f015 0506 	ands.w	r5, r5, #6
 800682c:	d106      	bne.n	800683c <_printf_common+0x48>
 800682e:	f104 0a19 	add.w	sl, r4, #25
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	6832      	ldr	r2, [r6, #0]
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	42ab      	cmp	r3, r5
 800683a:	dc26      	bgt.n	800688a <_printf_common+0x96>
 800683c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	3b00      	subs	r3, #0
 8006844:	bf18      	it	ne
 8006846:	2301      	movne	r3, #1
 8006848:	0692      	lsls	r2, r2, #26
 800684a:	d42b      	bmi.n	80068a4 <_printf_common+0xb0>
 800684c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006850:	4641      	mov	r1, r8
 8006852:	4638      	mov	r0, r7
 8006854:	47c8      	blx	r9
 8006856:	3001      	adds	r0, #1
 8006858:	d01e      	beq.n	8006898 <_printf_common+0xa4>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	f003 0306 	and.w	r3, r3, #6
 8006862:	2b04      	cmp	r3, #4
 8006864:	bf02      	ittt	eq
 8006866:	68e5      	ldreq	r5, [r4, #12]
 8006868:	6833      	ldreq	r3, [r6, #0]
 800686a:	1aed      	subeq	r5, r5, r3
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	bf0c      	ite	eq
 8006870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006874:	2500      	movne	r5, #0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfc4      	itt	gt
 800687a:	1a9b      	subgt	r3, r3, r2
 800687c:	18ed      	addgt	r5, r5, r3
 800687e:	2600      	movs	r6, #0
 8006880:	341a      	adds	r4, #26
 8006882:	42b5      	cmp	r5, r6
 8006884:	d11a      	bne.n	80068bc <_printf_common+0xc8>
 8006886:	2000      	movs	r0, #0
 8006888:	e008      	b.n	800689c <_printf_common+0xa8>
 800688a:	2301      	movs	r3, #1
 800688c:	4652      	mov	r2, sl
 800688e:	4641      	mov	r1, r8
 8006890:	4638      	mov	r0, r7
 8006892:	47c8      	blx	r9
 8006894:	3001      	adds	r0, #1
 8006896:	d103      	bne.n	80068a0 <_printf_common+0xac>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	3501      	adds	r5, #1
 80068a2:	e7c6      	b.n	8006832 <_printf_common+0x3e>
 80068a4:	18e1      	adds	r1, r4, r3
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	2030      	movs	r0, #48	@ 0x30
 80068aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ae:	4422      	add	r2, r4
 80068b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068b8:	3302      	adds	r3, #2
 80068ba:	e7c7      	b.n	800684c <_printf_common+0x58>
 80068bc:	2301      	movs	r3, #1
 80068be:	4622      	mov	r2, r4
 80068c0:	4641      	mov	r1, r8
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c8      	blx	r9
 80068c6:	3001      	adds	r0, #1
 80068c8:	d0e6      	beq.n	8006898 <_printf_common+0xa4>
 80068ca:	3601      	adds	r6, #1
 80068cc:	e7d9      	b.n	8006882 <_printf_common+0x8e>
	...

080068d0 <_printf_i>:
 80068d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	7e0f      	ldrb	r7, [r1, #24]
 80068d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068d8:	2f78      	cmp	r7, #120	@ 0x78
 80068da:	4691      	mov	r9, r2
 80068dc:	4680      	mov	r8, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	469a      	mov	sl, r3
 80068e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068e6:	d807      	bhi.n	80068f8 <_printf_i+0x28>
 80068e8:	2f62      	cmp	r7, #98	@ 0x62
 80068ea:	d80a      	bhi.n	8006902 <_printf_i+0x32>
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	f000 80d2 	beq.w	8006a96 <_printf_i+0x1c6>
 80068f2:	2f58      	cmp	r7, #88	@ 0x58
 80068f4:	f000 80b9 	beq.w	8006a6a <_printf_i+0x19a>
 80068f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006900:	e03a      	b.n	8006978 <_printf_i+0xa8>
 8006902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006906:	2b15      	cmp	r3, #21
 8006908:	d8f6      	bhi.n	80068f8 <_printf_i+0x28>
 800690a:	a101      	add	r1, pc, #4	@ (adr r1, 8006910 <_printf_i+0x40>)
 800690c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006910:	08006969 	.word	0x08006969
 8006914:	0800697d 	.word	0x0800697d
 8006918:	080068f9 	.word	0x080068f9
 800691c:	080068f9 	.word	0x080068f9
 8006920:	080068f9 	.word	0x080068f9
 8006924:	080068f9 	.word	0x080068f9
 8006928:	0800697d 	.word	0x0800697d
 800692c:	080068f9 	.word	0x080068f9
 8006930:	080068f9 	.word	0x080068f9
 8006934:	080068f9 	.word	0x080068f9
 8006938:	080068f9 	.word	0x080068f9
 800693c:	08006a7d 	.word	0x08006a7d
 8006940:	080069a7 	.word	0x080069a7
 8006944:	08006a37 	.word	0x08006a37
 8006948:	080068f9 	.word	0x080068f9
 800694c:	080068f9 	.word	0x080068f9
 8006950:	08006a9f 	.word	0x08006a9f
 8006954:	080068f9 	.word	0x080068f9
 8006958:	080069a7 	.word	0x080069a7
 800695c:	080068f9 	.word	0x080068f9
 8006960:	080068f9 	.word	0x080068f9
 8006964:	08006a3f 	.word	0x08006a3f
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6032      	str	r2, [r6, #0]
 8006970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006978:	2301      	movs	r3, #1
 800697a:	e09d      	b.n	8006ab8 <_printf_i+0x1e8>
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	6031      	str	r1, [r6, #0]
 8006984:	0606      	lsls	r6, r0, #24
 8006986:	d501      	bpl.n	800698c <_printf_i+0xbc>
 8006988:	681d      	ldr	r5, [r3, #0]
 800698a:	e003      	b.n	8006994 <_printf_i+0xc4>
 800698c:	0645      	lsls	r5, r0, #25
 800698e:	d5fb      	bpl.n	8006988 <_printf_i+0xb8>
 8006990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006994:	2d00      	cmp	r5, #0
 8006996:	da03      	bge.n	80069a0 <_printf_i+0xd0>
 8006998:	232d      	movs	r3, #45	@ 0x2d
 800699a:	426d      	negs	r5, r5
 800699c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a0:	4859      	ldr	r0, [pc, #356]	@ (8006b08 <_printf_i+0x238>)
 80069a2:	230a      	movs	r3, #10
 80069a4:	e011      	b.n	80069ca <_printf_i+0xfa>
 80069a6:	6821      	ldr	r1, [r4, #0]
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	0608      	lsls	r0, r1, #24
 80069ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80069b0:	d402      	bmi.n	80069b8 <_printf_i+0xe8>
 80069b2:	0649      	lsls	r1, r1, #25
 80069b4:	bf48      	it	mi
 80069b6:	b2ad      	uxthmi	r5, r5
 80069b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ba:	4853      	ldr	r0, [pc, #332]	@ (8006b08 <_printf_i+0x238>)
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	bf14      	ite	ne
 80069c0:	230a      	movne	r3, #10
 80069c2:	2308      	moveq	r3, #8
 80069c4:	2100      	movs	r1, #0
 80069c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ca:	6866      	ldr	r6, [r4, #4]
 80069cc:	60a6      	str	r6, [r4, #8]
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	bfa2      	ittt	ge
 80069d2:	6821      	ldrge	r1, [r4, #0]
 80069d4:	f021 0104 	bicge.w	r1, r1, #4
 80069d8:	6021      	strge	r1, [r4, #0]
 80069da:	b90d      	cbnz	r5, 80069e0 <_printf_i+0x110>
 80069dc:	2e00      	cmp	r6, #0
 80069de:	d04b      	beq.n	8006a78 <_printf_i+0x1a8>
 80069e0:	4616      	mov	r6, r2
 80069e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069e6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ea:	5dc7      	ldrb	r7, [r0, r7]
 80069ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069f0:	462f      	mov	r7, r5
 80069f2:	42bb      	cmp	r3, r7
 80069f4:	460d      	mov	r5, r1
 80069f6:	d9f4      	bls.n	80069e2 <_printf_i+0x112>
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d10b      	bne.n	8006a14 <_printf_i+0x144>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	07df      	lsls	r7, r3, #31
 8006a00:	d508      	bpl.n	8006a14 <_printf_i+0x144>
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	6861      	ldr	r1, [r4, #4]
 8006a06:	4299      	cmp	r1, r3
 8006a08:	bfde      	ittt	le
 8006a0a:	2330      	movle	r3, #48	@ 0x30
 8006a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006a14:	1b92      	subs	r2, r2, r6
 8006a16:	6122      	str	r2, [r4, #16]
 8006a18:	f8cd a000 	str.w	sl, [sp]
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	aa03      	add	r2, sp, #12
 8006a20:	4621      	mov	r1, r4
 8006a22:	4640      	mov	r0, r8
 8006a24:	f7ff fee6 	bl	80067f4 <_printf_common>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d14a      	bne.n	8006ac2 <_printf_i+0x1f2>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a30:	b004      	add	sp, #16
 8006a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f043 0320 	orr.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	4833      	ldr	r0, [pc, #204]	@ (8006b0c <_printf_i+0x23c>)
 8006a40:	2778      	movs	r7, #120	@ 0x78
 8006a42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6831      	ldr	r1, [r6, #0]
 8006a4a:	061f      	lsls	r7, r3, #24
 8006a4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a50:	d402      	bmi.n	8006a58 <_printf_i+0x188>
 8006a52:	065f      	lsls	r7, r3, #25
 8006a54:	bf48      	it	mi
 8006a56:	b2ad      	uxthmi	r5, r5
 8006a58:	6031      	str	r1, [r6, #0]
 8006a5a:	07d9      	lsls	r1, r3, #31
 8006a5c:	bf44      	itt	mi
 8006a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a62:	6023      	strmi	r3, [r4, #0]
 8006a64:	b11d      	cbz	r5, 8006a6e <_printf_i+0x19e>
 8006a66:	2310      	movs	r3, #16
 8006a68:	e7ac      	b.n	80069c4 <_printf_i+0xf4>
 8006a6a:	4827      	ldr	r0, [pc, #156]	@ (8006b08 <_printf_i+0x238>)
 8006a6c:	e7e9      	b.n	8006a42 <_printf_i+0x172>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	f023 0320 	bic.w	r3, r3, #32
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	e7f6      	b.n	8006a66 <_printf_i+0x196>
 8006a78:	4616      	mov	r6, r2
 8006a7a:	e7bd      	b.n	80069f8 <_printf_i+0x128>
 8006a7c:	6833      	ldr	r3, [r6, #0]
 8006a7e:	6825      	ldr	r5, [r4, #0]
 8006a80:	6961      	ldr	r1, [r4, #20]
 8006a82:	1d18      	adds	r0, r3, #4
 8006a84:	6030      	str	r0, [r6, #0]
 8006a86:	062e      	lsls	r6, r5, #24
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	d501      	bpl.n	8006a90 <_printf_i+0x1c0>
 8006a8c:	6019      	str	r1, [r3, #0]
 8006a8e:	e002      	b.n	8006a96 <_printf_i+0x1c6>
 8006a90:	0668      	lsls	r0, r5, #25
 8006a92:	d5fb      	bpl.n	8006a8c <_printf_i+0x1bc>
 8006a94:	8019      	strh	r1, [r3, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	4616      	mov	r6, r2
 8006a9c:	e7bc      	b.n	8006a18 <_printf_i+0x148>
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	6032      	str	r2, [r6, #0]
 8006aa4:	681e      	ldr	r6, [r3, #0]
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7f9 fb98 	bl	80001e0 <memchr>
 8006ab0:	b108      	cbz	r0, 8006ab6 <_printf_i+0x1e6>
 8006ab2:	1b80      	subs	r0, r0, r6
 8006ab4:	6060      	str	r0, [r4, #4]
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	2300      	movs	r3, #0
 8006abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac0:	e7aa      	b.n	8006a18 <_printf_i+0x148>
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	47d0      	blx	sl
 8006acc:	3001      	adds	r0, #1
 8006ace:	d0ad      	beq.n	8006a2c <_printf_i+0x15c>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	079b      	lsls	r3, r3, #30
 8006ad4:	d413      	bmi.n	8006afe <_printf_i+0x22e>
 8006ad6:	68e0      	ldr	r0, [r4, #12]
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	4298      	cmp	r0, r3
 8006adc:	bfb8      	it	lt
 8006ade:	4618      	movlt	r0, r3
 8006ae0:	e7a6      	b.n	8006a30 <_printf_i+0x160>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	4640      	mov	r0, r8
 8006aea:	47d0      	blx	sl
 8006aec:	3001      	adds	r0, #1
 8006aee:	d09d      	beq.n	8006a2c <_printf_i+0x15c>
 8006af0:	3501      	adds	r5, #1
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	9903      	ldr	r1, [sp, #12]
 8006af6:	1a5b      	subs	r3, r3, r1
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dcf2      	bgt.n	8006ae2 <_printf_i+0x212>
 8006afc:	e7eb      	b.n	8006ad6 <_printf_i+0x206>
 8006afe:	2500      	movs	r5, #0
 8006b00:	f104 0619 	add.w	r6, r4, #25
 8006b04:	e7f5      	b.n	8006af2 <_printf_i+0x222>
 8006b06:	bf00      	nop
 8006b08:	080072d5 	.word	0x080072d5
 8006b0c:	080072e6 	.word	0x080072e6

08006b10 <memmove>:
 8006b10:	4288      	cmp	r0, r1
 8006b12:	b510      	push	{r4, lr}
 8006b14:	eb01 0402 	add.w	r4, r1, r2
 8006b18:	d902      	bls.n	8006b20 <memmove+0x10>
 8006b1a:	4284      	cmp	r4, r0
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	d807      	bhi.n	8006b30 <memmove+0x20>
 8006b20:	1e43      	subs	r3, r0, #1
 8006b22:	42a1      	cmp	r1, r4
 8006b24:	d008      	beq.n	8006b38 <memmove+0x28>
 8006b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b2e:	e7f8      	b.n	8006b22 <memmove+0x12>
 8006b30:	4402      	add	r2, r0
 8006b32:	4601      	mov	r1, r0
 8006b34:	428a      	cmp	r2, r1
 8006b36:	d100      	bne.n	8006b3a <memmove+0x2a>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b42:	e7f7      	b.n	8006b34 <memmove+0x24>

08006b44 <memcpy>:
 8006b44:	440a      	add	r2, r1
 8006b46:	4291      	cmp	r1, r2
 8006b48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b4c:	d100      	bne.n	8006b50 <memcpy+0xc>
 8006b4e:	4770      	bx	lr
 8006b50:	b510      	push	{r4, lr}
 8006b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d1f9      	bne.n	8006b52 <memcpy+0xe>
 8006b5e:	bd10      	pop	{r4, pc}

08006b60 <_realloc_r>:
 8006b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b64:	4680      	mov	r8, r0
 8006b66:	4615      	mov	r5, r2
 8006b68:	460c      	mov	r4, r1
 8006b6a:	b921      	cbnz	r1, 8006b76 <_realloc_r+0x16>
 8006b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	4611      	mov	r1, r2
 8006b72:	f7ff bab5 	b.w	80060e0 <_malloc_r>
 8006b76:	b92a      	cbnz	r2, 8006b84 <_realloc_r+0x24>
 8006b78:	f7ff fc66 	bl	8006448 <_free_r>
 8006b7c:	2400      	movs	r4, #0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b84:	f000 f81a 	bl	8006bbc <_malloc_usable_size_r>
 8006b88:	4285      	cmp	r5, r0
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	d802      	bhi.n	8006b94 <_realloc_r+0x34>
 8006b8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b92:	d8f4      	bhi.n	8006b7e <_realloc_r+0x1e>
 8006b94:	4629      	mov	r1, r5
 8006b96:	4640      	mov	r0, r8
 8006b98:	f7ff faa2 	bl	80060e0 <_malloc_r>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0ec      	beq.n	8006b7c <_realloc_r+0x1c>
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	bf28      	it	cs
 8006baa:	4632      	movcs	r2, r6
 8006bac:	f7ff ffca 	bl	8006b44 <memcpy>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7ff fc48 	bl	8006448 <_free_r>
 8006bb8:	463c      	mov	r4, r7
 8006bba:	e7e0      	b.n	8006b7e <_realloc_r+0x1e>

08006bbc <_malloc_usable_size_r>:
 8006bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc0:	1f18      	subs	r0, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfbc      	itt	lt
 8006bc6:	580b      	ldrlt	r3, [r1, r0]
 8006bc8:	18c0      	addlt	r0, r0, r3
 8006bca:	4770      	bx	lr

08006bcc <_init>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr

08006bd8 <_fini>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	bf00      	nop
 8006bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bde:	bc08      	pop	{r3}
 8006be0:	469e      	mov	lr, r3
 8006be2:	4770      	bx	lr
